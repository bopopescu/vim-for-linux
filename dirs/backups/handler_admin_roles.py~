#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
import time
from log import get_logger
from auth import requires_auth
from model.roles_ht import Roles_ht
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient

try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class AdminRolesHandler(BaseHtHandler):
    @asynchronous
    @requires_auth
    def get(self):
        log.info("AdminRolesHandler.get:"+self.request.body)

        ##获取权限点的详细信息
        permission_dic={}
        permission_cursor=options.dbconn_ht.Permission_ht.find({})
        for permission in permission_cursor:
           permission_dic[str(permission["_id"])]=permission

        roles=[]

        reuslt=options.dbconn_ht.Roles_ht.find({})
        for role in reuslt:
            role_permission_id_array=role["permissions"]
            permission_detail_array=[]
            for role_permission_id in role_permission_id_array:
                if permission_dic.has_key(role_permission_id):
                    permission_detail_array.append(permission_dic[role_permission_id])
            role["permission_detail_array"]=permission_detail_array
            roles.append(role)

        # for 

        response={}
        response["entities"]=roles
        self.write(json.dumps(response,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()
    
    @asynchronous
    @requires_auth
    def post(self):
        log.info("AdminRolesHandler.post:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")

        roles = self.get_argument('roles')
        log.info("roles:"+roles)
        roles_array=roles.split(",")

        admin_role=options.dbconn_ht.Roles_ht()
        admin_role["role_name"]= self.get_argument('role_name')
        admin_role["permissions"]=roles_array
        admin_role.save()

        self.redirect('/static/op_success.html')

    def fire_response_bad_response(self):
        """
        返回登录请求错误响应
        """
        self.set_status(400)
        response = {}
        response["error"] = "invalid_grant"
        response["error_description"] = "invalid username or password"
        self.write(json.dumps(response, indent=2, ensure_ascii=False))
        self.finish()
