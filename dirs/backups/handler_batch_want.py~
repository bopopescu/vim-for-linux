#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
import pymongo
import time
from log import get_logger
from model.accounts_ht import Account_ht
from model.users import Users
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from auth import requires_auth
from utils.mongo_client import MongoClient
from tornado import gen
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class BatchWantHandler(BaseHtHandler):
    @asynchronous
    @requires_auth
    @tornado.gen.engine
    def post(self):
        log.info("BatchWantHandler.post:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")
        
        
        body_dic = json.loads(self.request.body,encoding="utf-8")
        username=body_dic["username"]
        log.info("username:"+username)

        like_posts=body_dic["like_posts"]
        log.info("like_posts:"+like_posts)
        like_posts_array=like_posts.split(",")

        user_info={
            "grant_type":"password",
            "username":username,
            "password":options.vest_user_password
        }

        ####获取关注人token
        server_url=options.fish_front_end_server+"/login"
        request = HTTPRequest(url=server_url,\
                              method="POST", \
                              body=json.dumps(user_info,indent=2, ensure_ascii=False,cls=MongoFieldEncoder),\
                              follow_redirects=False,\
                              request_timeout=3000)
        
        response=yield gen.Task(AsyncHTTPClient().fetch,request)

        if response.body:
            log.info("response.body11:"+response.body+"  code:"+str(response.code))

        if response.code!=200:
            log.info("error:"+str(response.error))

        response_body_dic = json.loads(response.body,encoding="utf-8")
        token=response_body_dic["access_token"]


        headers = {}
        headers["Host"] = options.api_host
        headers["Authorization"]=" Bearer %s"%(token)
        for like_post in like_posts_array:
            # log.info("followed_user:"+followed_user)
            request={
                "post_id":like_post
            }
            server_url=options.fish_front_end_server+"/want_go"
            request = HTTPRequest(url=server_url,\
                              method="POST", \
                              headers=headers, \
                              body=json.dumps(request,indent=2, ensure_ascii=False,cls=MongoFieldEncoder),\
                              follow_redirects=False,\
                              request_timeout=3000)
        
            response=yield gen.Task(AsyncHTTPClient().fetch,request)


        self.write(json.dumps({},indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()

    @asynchronous
    @requires_auth
    @tornado.gen.engine
    def delete(self):
        log.info("BatchFollowingHandler.delete:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")
        
        following=self.get_argument('following',"")
        log.info("following:"+following)

        followed_users=self.get_argument('followed_users',"")
        log.info("followed_users:"+followed_users)
        followed_user_array=followed_users.split(",")

        user_info={
            "username":following,
            "password":options.vest_user_password
        }

        ####获取关注人token
        server_url=options.fish_front_end_server+"/login"
        request = HTTPRequest(url=server_url,\
                              method="POST", \
                              body=json.dumps(user_info,indent=2, ensure_ascii=False,cls=MongoFieldEncoder),\
                              follow_redirects=False,\
                              request_timeout=3000)
        
        response=yield gen.Task(AsyncHTTPClient().fetch,request)

        if response.body:
            log.info("response.body:"+response.body+"  code:"+str(response.code))

        response_body_dic = json.loads(response.body,encoding="utf-8")
        token=response_body_dic["access_token"]


        headers = {}
        headers["Host"] = options.api_host
        headers["Authorization"]=" Bearer %s"%(token)
        for followed_user in followed_user_array:
            # log.info("followed_user:"+followed_user)
            
            server_url=options.fish_front_end_server+"/following?following="+followed_user
            request = HTTPRequest(url=server_url,\
                              method="DELETE", \
                              headers=headers, \
                              follow_redirects=False,\
                              request_timeout=3000)
        
            response=yield gen.Task(AsyncHTTPClient().fetch,request)


        self.write(json.dumps({},indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()
