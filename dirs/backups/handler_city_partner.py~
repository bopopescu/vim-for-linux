#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
from services.service_post import *
import re
import hashlib
from bson import ObjectId
import random
import time
from log import get_logger
from model.city_partner import City_Partner
from model.permissions_ht import Permissions_ht
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from utils.mongo_front import MongoFront
from mongo_field_encoder import MongoFieldEncoder
from services.service_activity import *
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from services.service_image_cloud import *
import pymongo
from auth import requires_auth
from services.service_admin_log import save_log
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class CityPartnerHandler(BaseHtHandler):
    '''
     合伙人信息修改
    '''
    @requires_auth
    @asynchronous
    def put(self,partner_id_url):
        log.info("CityPartnerHandler.put:"+self.request.body)
        try:
            body_dic = json.loads(self.request.body,encoding="utf-8")
            partner_id=partner_id_url[1:]
            if not partner_id:
                self.fire_response_bad_request("id")
                return
            log.info("partner_id:"+str(partner_id))
            lookup = {
                '_id':ObjectId(partner_id)
            }
            updated_value={
            }
            ziya_code=body_dic.get("ziya_code",None)
            if ziya_code:
                where={
                    "invite_code":ziya_code
                }
                user=MongoFront.find_one(where,"users")
                if user:
                    updated_value["username"]=user["username"]
                    updated_value["invite_code"]=ziya_code

            province=body_dic.get("province",None)
            city=body_dic.get("city",None)
            if province and city:
                updated_value["province"]=province
                updated_value["city"]=city


            qq = body_dic.get("qq",None)
            if qq:
                updated_value["qq"]=qq

            real_name=body_dic.get("real_name",None)
            if real_name:
                updated_value["real_name"]=real_name

            ID_card=body_dic.get("ID_card",None)
            if ID_card:
                updated_value["ID_card"]=ID_card

            bank_account=body_dic.get("bank_account",None)
            if bank_account:
                updated_value["bank_account"]=bank_account

            bank_name=body_dic.get("bank_name",None)
            if bank_name:
                updated_value["bank_name"]=bank_name


            mobile=body_dic.get("mobile",None)
            if mobile:
                updated_value["mobile"]=mobile

            desc=body_dic.get("desc",None)
            if desc:
                updated_value["desc"]=desc

            email=body_dic.get("email",None)
            if email:
                updated_value["email"]=email


            contract_time=body_dic.get("contract_time",None)
            if contract_time:
                updated_value["contract_time"]=contract_time


            act=body_dic.get("act",None)
            if act=="partner_qualification_apply_check_pass":
                updated_value["status"]=1

            if act=="partner_qualification_apply_check_no_pass":
                updated_value["status"]=2
                check_failed_reason=body_dic.get("check_failed_reason",None)
                if check_failed_reason:
                    updated_value["check_failed_reason"]=check_failed_reason

            response = {"entities":[]}
            if updated_value:
                city_partner=MongoFront.find_and_modify(lookup,{"$set":updated_value},"city_partner_info")
                response["entities"]=[city_partner]

            self.write(json.dumps(response,
                                  indent=2,
                                  ensure_ascii=False,
                                  cls=MongoFieldEncoder))
            self.finish()
        except Exception as e:
            log.info('DeletePostHandler.put Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return

    @asynchronous
    @requires_auth
    def get(self,partner_id_flag):
        log.info("CityPartnerHandler.get is called:")

        if partner_id_flag is not None:
            partner_id = partner_id_flag[1:]
            self.fetch_partner(partner_id)
        else:
            self.fetch_partner_list()

    def fetch_partner_list(self):
        where={
            'status':{"$lt":10}
        }

        limit=10
        curr = self.get_argument('curr',"")
        status = self.get_argument('status',None)
        sort = [('created', pymongo.DESCENDING)]
        # # log.info("curr:"+curr)
        begin = self.get_argument('begin',None)
        end = self.get_argument('end',None)

        if status is not None:
            where["status"]=int(status)
        if begin!=None:
           # log.info("datemin:"+datemin)
           begin_date = datetime.datetime.strptime(begin, "%Y-%m-%d")-datetime.timedelta(hours=8)
           where["created"]={"$gte":begin_date}

        if end!=None:
           # log.info("datemax:"+datemax)
           end_date = datetime.datetime.strptime(end, "%Y-%m-%d")-datetime.timedelta(hours=8)
           between={}
           if where.has_key("created"):
               between=where["created"]

           between["$lte"]=end_date
           where["created"]=between

        ziya_code = self.get_argument('ziya_code',None)
        if ziya_code:
            where['invite_code']=ziya_code

        status = self.get_argument('status',None)
        if status is not None:
            where['status']=int(status)

        province=self.get_argument('province',None)
        if province:
            where["province"]=province

        city=self.get_argument('city',None)
        if city:
            where["city"]={
                "$in":city.split(",")
            }

        log.info("where:"+str(where))
        # log.info("sort:"+str(sort))

        if curr=="":
            city_partner_cursor = options.dbconn.City_Partner.find(where).sort(sort).limit(limit)
        else:
            city_partner_cursor = options.dbconn.City_Partner.find(where).sort(sort).skip((int(curr)-1)*limit).limit(limit)

        # log.info("post_cursor:"+str(post_cursor.count()))

        city_partner_arrary=[]
        for city_partner in city_partner_cursor:
            city_partner_arrary.append(city_partner)

        response={}
        response["entities"]=city_partner_arrary
        response["count"]=str(city_partner_cursor.count())
        self.write(json.dumps(response,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()

    def fetch_partner(self,partner_id):
        lookup = {
            '_id':ObjectId(partner_id)
        }
        city_partner=options.dbconn.City_Partner.find_one(lookup)
        response={}
        if city_partner:
            response["entities"]=[city_partner]

        self.write(json.dumps(response,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()



