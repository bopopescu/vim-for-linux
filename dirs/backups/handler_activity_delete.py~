#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
from auth import requires_auth
import hashlib
from bson import ObjectId
import random
import time
from log import get_logger
from model.advices import Advice
from model.permissions_ht import Permissions_ht
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from utils.mongo_front import MongoFront
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
import pymongo
from services.service_activities import *

try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class ActivityDeleteHandler(BaseHtHandler):
    @requires_auth
    @asynchronous
    def get(self):
        
        #初始化
        where = { 'deleted': {'$ne': True},"pre_delete":True,"activity_type":1}
        sort= {}
        sort_by = 'created'
        sort_value = pymongo.DESCENDING
        entities = []
        response = {}

        #查询参数设置
        limit = int(self.get_argument('limit',10))
        curr = self.get_argument('curr','')
        datemin = self.get_argument('datemin',None)
        datemax = self.get_argument('datemax',None)
        post_type = self.get_argument('post_type','')
        city = self.get_argument('city',None)
        username = self.get_argument('username',None)

        if username is not None:
            where["actor.username"] = username
        
        if datemin != None:
           log.info("datemin:"+datemin)
           datemin = datetime.datetime.strptime(datemin, "%Y-%m-%d")
           where["created"] = {"$gte":datemin}
 
        if datemax != None:
           log.info("datemax:"+datemax)
           datemax = datetime.datetime.strptime(datemax, "%Y-%m-%d")
           between={}
           if where.has_key("created"):
               between=where["created"]

           between["$lte"]=datemax
           where["created"]=between
        
        if post_type != "":
            if post_type == "2":
                where["post_type"] = "2"
            elif post_type == "1":
                where["post_type"] = {"$ne":"2"}
        
       
        self.city_deal(city,where)
        
        province = self.get_argument('province',None)
        if province!=None:
            log.info("province:"+province)
            where['gps_info.province']=province
            


        condition = self.get_argument('condition',None)

        if condition!=None:
            condition_dic=json.loads(condition,encoding="utf-8")
            if condition_dic.has_key("ids"):
                ids=condition_dic["ids"]
                id_array=ids.split(",")
                objectIdArray=[]
                for id in id_array:
                    objectIdArray.append(ObjectId(id))
                where['_id'] = {"$in":objectIdArray}

        ##排序
        sort_by = self.get_argument("sort_by","")
        sort_value = self.get_argument('sort_value',"")

        log.info("where:"+str(where))
        # log.info("sort_by:"+sort_by)
        # log.info("sort_value:"+sort_value)
        sort=[]
        if sort_by=="":
            ##默认排序：先按排名排，然后按发活动时间排
            sort = [('rank',pymongo.ASCENDING),('created', pymongo.DESCENDING)]
        else:
            sort=[(sort_by,int(sort_value))]
        #查询
        if curr=="":
            activities = options.dbconn.Activities.find(where).sort(sort).limit(limit)
        else:
            activities = options.dbconn.Activities.find(where).sort(sort).skip((int(curr)-1)*limit).limit(limit)
        #

        #结果处理
        if activities!=None:
            entities = getActivityList(activities)
        response["entities"] = entities
        response["count"] = str(activities.count())
        self.write(json.dumps(response,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()
        #
    
    
    def city_deal(self,city,where):
        
        if city!=None:
            log.info("city:"+city) 
            cities = city.split(',')
            if '海外' in city:
                index = cities.index('海外')
                del cities[index]
                where['$or']=[
                              {'gps_info.city':{'$in':cities}},
                              {'gps_info.country_code':{'$nin':['','cn'],'$exists':True}}
                              ]
            
            elif '其他' in city:
                index = cities.index('其他')
                del cities[index]
                
                #由于海外的数据存在只有country_code,没有city，所以其他的数据应该把这类排除在外
                where['$or']=[
                               {'gps_info.city':{'$in':cities}},
                               {'gps_info.country_code':{'$exists':False}},
                               {'gps_info.country_code':''},
                               {'gps_info.country_code':'cn','gps_info.city':''},
                               {'gps_info.country_code':'cn','gps_info.city':{'$exists':False}},
                              ]
                
              
            else:
                 where['gps_info.city']={'$in':cities}
    
    
    
    
    
    


    
    
    
    