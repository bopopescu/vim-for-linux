#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
import pymongo
import time
from log import get_logger
from model.accounts_ht import Account_ht
from model.users import Users
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from utils.mongo_front import MongoFront
from tornado import gen
from auth import requires_auth
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class MyVestHandler(BaseHtHandler):
    @asynchronous
    @tornado.gen.engine
    @requires_auth
    def get(self):
        log.info("MyVestHandler.get:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")


        coordinates = []
        chat_user=self.get_argument("chat_user","")
        if chat_user!="":
            where = {"username":chat_user}
            user = MongoFront.find_one(where,"users")
            if user!=None:
                gps_info = user.get("gps_info","")
                if gps_info!="":
                    location = gps_info.get("location","")
                    if location!="":
                        coordinates = location.get("coordinates")
                        if int(coordinates[0])==0:
                            coordinates = [0,0]


        username=self.username

        where={
            "user_type":"2","freeze_status":{"$ne":"2"}
        }


        limit=1000
        curr_user=self.me
        level=curr_user.get("level","")
        ####员工账号和值班账号只能看到自己的创建的小号
        if level!="leader" and username!="ziya009":
            where["belong_to"]=username

        # if username=="fenglin":
        #     where["post_count"]={"$gt":0}
        #     limit=100


        filter={
            "_id":0,
            "username":1,
            "sex":1,
            "followed_num":1,
            "post_count":1,
            "nick":1,
            "last_login":1,
            "gps_info":1,
            "last_post_date":1,
            "following_num":1,
            "created":1,
            "mobile":1,
            "avatar_url":1
        }
        log.info("where:"+str(where))
        users=[]
        sort = [('gps_info.city',pymongo.DESCENDING),('created', pymongo.DESCENDING)]


        user_cursor = None
        if len(coordinates)>0:
            where["gps_info.location"]={
                                    "$near":{"$geometry":{
                                                         "type" : "Point",
                                                         "coordinates" : coordinates
                                                         }}}
            user_cursor=options.dbconn.Users.find(where,filter).limit(limit)
        else:
             user_cursor=options.dbconn.Users.find(where,filter).sort(sort).limit(limit)
        for user in user_cursor:
            users.append(user)

        response={}
        response["entities"]=users

        self.write(json.dumps(response,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()
