#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division
from access_track import access_log
import tornado.web
from tornado.web import asynchronous
from tornado.options import options

from mongokit import *
from mongokit.helpers import totimestamp, fromtimestamp
import pymongo
from mongo_field_encoder import MongoFieldEncoder
from handler_base import BaseHandler
from services.service_post import *
from auth import requires_auth
import traceback
import json
import bson
from bson import ObjectId
import datetime
import time
import random
from log import get_logger
from utils.mongo_client import MongoClient
from model.posts import Post
from model.user_collect_post import User_collect_post
from utils.redis_client import RedisClient
from services.service_activity import *
from services.service_fishing_place import getPlaceList, getCollectPlaceList
log = get_logger()

class PlaceCollectHandler(BaseHandler):
    """
    钓场收藏处理类
    """
    def __init__(self, application, request, **kwargs):
        super(PlaceCollectHandler, self).__init__(application, request, **kwargs)

    @asynchronous
    @requires_auth
    @access_log
    def post(self):
        log.info('PlaceCollectHandler.post is called:'+self.request.body)
        body_dic = json.loads(self.request.body)
        place_id = body_dic.get("id", '')
        if not place_id:
            self.fire_response_bad_content("parameter_error", "id is the necessary parameter", "缺少参数")
            return

        username = self.username
        lookup = {
            "_id": ObjectId(place_id),
            "deleted": {"$ne": True},
        }

        place = MongoClient.find_one(lookup, "fishing_place")
        if not place:
            self.fire_response_bad_content("common_error", "place not exists", "钓场不存在")
            return
        response = {}

        curr_date = datetime.datetime.utcnow()
        # where = {
            # 'place_id': place_id,
            # 'username': unicode(self.username)
        # }
        # collect_place = MongoClient.find_one(where, "user_collect_place")

        # if collect_place:
            # self.fire_response_bad_content("common_error", "user has collected this place", "已经收藏")
            # return
        update = {
                'username': unicode(self.username), 
                'place_id': place_id,
                'place_created': place['created'],
                'created': curr_date,
        }

        MongoClient.insert(update, "user_collect_place")
        self.write(response)
        self.finish()

        # 收藏后添加异步处理任务
        # if is_success:
            # user_act = {
                # "act": "place_collect",
                # "username": self.username,
                # "place_id": activity_id
            # }
            # user_act_string = json.dumps(user_act,
                                         # indent=2,
                                         # ensure_ascii=False,
                                         # cls=MongoFieldEncoder)
            # user_act_queue = options.queue_act
            # RedisClient.rpush(user_act_queue, user_act_string)


    @asynchronous
    @access_log
    @requires_auth
    def get(self):
        """
            type: self,     我的钓场
            type: collect,  我收藏的钓场
        """
        log.info('PlaceCollectHandler.get is called')
        username = self.username
        lookup = {
            'username': username,
        }
        request_cursor = self.get_argument('cursor','')
        # 时间
        if request_cursor != '':
            timestamp = fromtimestamp(int(request_cursor))
            lookup["created"] = {'$lt': timestamp}
        fishing_place_collect_array, place_cursor = getCollectPlaceList(lookup)

        place_ids = [ObjectId(collect.get("place_id")) for collect in fishing_place_collect_array]
        place_lookup = {}
        place_lookup["status"] = 1
        place_lookup["_id"] = {'$in': place_ids}

        fishing_place_array = MongoClient.find_all(place_lookup, "fishing_place")
        fishing_place_array = sorted(fishing_place_array, key=lambda x: place_ids.index(x["_id"]))
        response_dic = {}

        if place_cursor:
            response_dic["cursor"] = place_cursor
        response_dic["entities"] = fishing_place_array

        response = json.dumps(response_dic,
                              indent=2,
                              ensure_ascii=False,
                              cls=MongoFieldEncoder)
        self.write(response)
        self.finish()

    @asynchronous
    @requires_auth
    @access_log
    def delete(self):
        placeid = self.get_argument('id','')
        lookup = {
            'place_id': placeid,
            'username': self.username,
        }

        try:
            MongoClient.delete(lookup,"user_collect_place")
            self.finish()
        except Exception as e:
            self.set_status(400)
            response = {}
            response["error"] = "bad_request"
            response["error_description"] = e.message
            self.write(json.dumps(response, indent=2, ensure_ascii=False))
            self.finish()
