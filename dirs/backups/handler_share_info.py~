#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2014-12-05 15:45:20
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$

from __future__ import division
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
from handler_base import BaseHandler
from mongokit import *
from mongokit.helpers import totimestamp, fromtimestamp
import pymongo
from mongo_field_encoder import MongoFieldEncoder
from access_track import access_log
from utils.mongo_client import MongoClient
from services.service_share_info import *

from auth import requires_auth
import traceback
import json
import bson
from bson import ObjectId
import datetime
import time
from tornado import gen

from log import get_logger
from urllib import unquote

log = get_logger()

class ShareInfoHandler(BaseHandler):
    """
    帖子分享处理类
    """
    def __init__(self, application, request, **kwargs):
        super(ShareInfoHandler, self).__init__(application, request, **kwargs)

    @gen.coroutine
    @access_log
    def get(self):
       """
        获取分享信息
       """
       log.info("ShareInfoHandler.get")

       try:
            self.set_header("Access-Control-Allow-Origin", "*")
            id=self.get_argument("id","")
            shareType=self.get_argument("shareType","")
            channel=self.get_argument("channel", "")
            fromajax = self.get_argument("fromajax", "")
            ziya_url = self.get_argument("ziya_url", "")
            ziya_url = unquote(ziya_url)
            user = self.me
            ziyacode = ""
            if user!=None and "invite_code" in user:
                ziyacode = user["invite_code"]
                ziyacode_ary=["187434","203047","342925","930134"]
                if ziyacode not in ziyacode_ary:
                    ziyacode = ""

            # 判断是否是ajax 请求的数据
            if len(fromajax) > 0:
                share_info = yield self.get_all_channel_share_info(id, shareType, ziyacode, ziya_url)
            else:
                share_info = self.getShareInfo(id, shareType, channel, ziyacode=ziyacode)
            entities = [share_info]
            response = {}
            response["entities"]=entities

            self.write(json.dumps(response,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
            self.finish()

       except Exception as e:
            log.info('ShareInfoHandler.get Exception:%s' % e.message)
            self.fire_response_bad_request(key_required=e.message)
            raise



    def getShareInfo(self,id,shareType,channel,ziyacode=""):
        share_info = {}
        actor_username=self.username
        if shareType=="post":
            share_info = getPostShare(id,channel,ziyacode=ziyacode,actor_username=actor_username)
        elif shareType=="activity":
            share_info = getActivityShare(id,channel,ziyacode=ziyacode)
        elif shareType=="app":
            share_info = getAppShare(channel,ziyacode=ziyacode)
        elif shareType=="video":
            share_info = getVideoShare(id,channel,ziyacode=ziyacode, actor_username=actor_username)
        return share_info

    @gen.coroutine
    def get_all_channel_share_info(self, id, shareType, ziyacode="", ziya_url=""):
        share_info = {}
        if shareType == "post":
            share_info = yield get_all_post_share_info(id, ziyacode, ziya_url)
        elif shareType == "activity":
            share_info = yield get_all_activity_share_info(id, ziyacode, ziya_url)
        elif shareType == "app":
            share_info = yield get_all_app_share_info(ziyacode, ziya_url)
        elif shareType == "video":
            share_info = yield get_all_video_share_info(id, ziyacode, ziya_url)

        raise gen.Return(share_info)








