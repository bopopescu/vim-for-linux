#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
import pymongo
import time
from log import get_logger
from model.accounts_ht import Account_ht
from model.users import Users
import optionsSetting
import datetime
import  time
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from utils.mongo_front import MongoFront
from auth import requires_auth
import re
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()


class ToolsPlaceListHandler(BaseHtHandler):
    @asynchronous
    @requires_auth
    def get(self):
        log.info("ToolsPlaceListHandler.get:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")
        where={
        }
        filter={
            "_id":0,
            "code": 1,
            "value":1
        }

        all_tools = list(MongoFront.find_all(where, "tool_list_place_property", filter))
        tools_dic = {}
        for tool in all_tools:
            tools_dic[tool["code"]] = tool["value"]
        response = {}
        response["entities"]=tools_dic

        self.write(json.dumps(response, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()
    
    def fire_response_bad_response(self):
        """
        返回登录请求错误响应
        """
        self.set_status(400)
        response = {}
        response["error"] = "invalid_grant"
        response["error_description"] = "invalid username or password"
        self.write(json.dumps(response, indent=2, ensure_ascii=False))
        self.finish()
