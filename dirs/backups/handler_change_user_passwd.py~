#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2014-12-03 20:35:12
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$

import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import re
import hashlib
import datetime
import hashlib
import random
import time
from log import get_logger
from model.accounts import Account
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from handler_baseHt import BaseHtHandler
from utils.mongo_front import MongoFront
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from tornado.httpclient import HTTPRequest
import hashlib
from tornado import gen
from auth import requires_auth

try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()


class ChangeUserPasswdHandler(BaseHtHandler):
    """
       修改小号密码
    """

    def __init__(self, application, request, **kwargs):
        super(ChangeUserPasswdHandler, self).__init__(application, request, **kwargs)


    @asynchronous
    @gen.coroutine
    def post(self):
        log.info("ChangeUserPasswdHandler.post is called:"+ str(self.request.body))
        try:
            request_dic={}
            url = options.fish_front_end_server + "/updatePWDByOldPWD"
            body_dic = json.loads(self.request.body, encoding="utf-8")
            new_passwd = body_dic.get("new_passwd","")
            username = body_dic.get("username","")
            new_passwd = md5(new_passwd)
            if not new_passwd:
                self.fire_response_bad_content("common_error","param not right","请输入密码")
                return
            # # ###非admin账号和fenglin账号,没有权限
            # operate_username = self.username
            # if operate_username != "admin" and operate_username != "fenglin":
            #     self.fire_response_bad_content("commen_error", "Permission denied", "您没有权限！")
            #     return
            request_dic["new_password"] = new_passwd
            request_dic["username"] = username
            account_where = {
                "username":username
            }
            accounts_temp = MongoFront.find_one(account_where,"accounts")
            token=""
            if accounts_temp:
                old_password = accounts_temp["password"]
                token = accounts_temp["token"]
                request_dic["old_password"] = old_password
            else:
                self.fire_response_bad_content("commen_error","user not exists","用户信息不存在")
                return

            log.info("url=%s,request_dic=%s"%(url,request_dic))
            response = self.request_post_json(url,request_dic,token)
            result = yield response
            code = result.code
            if code == 200:
                result_dic = json.loads(result.body, encoding='utf-8')
                log.info("result_dic" + str(result_dic))
                response = {
                    "result":"ok"
                }
                self.set_status(result.code)
                self.write(response)
                self.finish()
            else:
                response_dic = json.loads(result.body, encoding='utf-8')
                log.info("response_dic" + str(response_dic))
                error_description = response_dic.get("error_description","change error")
                error = response_dic.get("error","")
                content = response_dic.get("content","修改异常")
                self.fire_response_bad_content(error,error_description,content)
                return

        except Exception as e:
            log.error("EntertainOrderHandler exception:" + e.message)
            log.error(traceback.format_exc())
            self.fire_response_sys_error()
