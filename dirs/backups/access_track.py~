#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2014-12-02 14:01:13
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$

from tornado.options import options
import functools
import json
import datetime
from log import get_logger
from utils.secret import *
import traceback
from mongo_field_encoder import MongoFieldEncoder
from utils.redis_client import RedisClient
from services.service_credit import pushRedis
from distutils.version import LooseVersion
import re
from handler_base import BaseHandler


log = get_logger()

def access_log(func):
    """
    访问日志记录装饰器
    """
    @functools.wraps(func)
    def decorated(*args, **kwargs):
        handler = args[0]
        resource = handler.request.uri

        index=resource.find("?")
        if index>=0:
            resource=resource[:index]

        resource_class = 'resource' if len(args) == 1 else 'item'
        method = handler.request.method
        # log.info("method:"+str(method))
        # log.info("resource:"+str(resource))



        ip=""
        if handler.request.remote_ip:
            ip=str(handler.request.remote_ip)

        access_log={
            "method":str(method),
            "resource":str(resource)
        }

        token = handler.request.headers.get("Authorization", None)
        try:
            token = token.split(' ')[1]
        except:
            token = None

        if token:
            access_log["token"] = token

        if handler.udid:
            access_log["udid"]=handler.udid

        if ip:
            access_log["ip"]=ip
        queue_name=options.access_log_queue
        access_log_message = json.dumps(access_log,
                          indent=2,
                          ensure_ascii=False,
                          cls=MongoFieldEncoder)
        # log.info("insert queue:%s"%queue_name)
        # log.info("insert message_event:%s"%access_log_message)
        RedisClient.rpush(queue_name,access_log_message)

        print(args, kwargs)
        return func(*args, **kwargs)
    return decorated



def isAddCredits(handler):
        try:
            os,version=getClientVersion(handler)
            if os and version:
                if os=="ios":
                    return LooseVersion(version)>LooseVersion(options.credits_Version_ios)

                if os=="android":
                    return LooseVersion(version)>LooseVersion(options.credits_Version_android)

            return False
        except Exception as e:
            log.info(traceback.format_exc())
            log.info('BaseHandler.get Exception:%s' % e.message)
            return False

    ###获得当前APP版本号和操作系统
def getClientVersion(handler):
        version=handler.request.headers.get("Version","")
        version2=""

        User_Agent=handler.request.headers.get("User-Agent","")

        if User_Agent:
            User_Agent_array=User_Agent.split(" ")
            if len(User_Agent_array)>=1:
                version_addtion=User_Agent_array[0]
                version_addtion_array=version_addtion.split("/")
                if len(version_addtion_array)==2:
                    if version_addtion_array[0]=="Fish":
                        version2=version_addtion_array[1]

        if version2:
            return "ios",version2
        else:
            return "android",version


