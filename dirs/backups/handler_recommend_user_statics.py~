#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
from bson import ObjectId
import random
import time
from log import get_logger
from auth import requires_auth
from model.advices import Advice
from model.permissions_ht import Permissions_ht
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from utils.mongo_front import MongoFront
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
import pymongo

try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class RecommendUserStaticsHandler(BaseHtHandler):
    @asynchronous
    @requires_auth
    def get(self):
        log.info("RecommendUserStaticsHandler.get:"+self.request.body)
        now_yyyymmdd=datetime.datetime.now().strftime('%Y%m%d')
        befor_10_days_yyyymmdd=(datetime.datetime.now()+datetime.timedelta(days=-10)).strftime('%Y%m%d')

        datemax = self.get_argument('datemax',now_yyyymmdd)
        datemin = self.get_argument('datemin',befor_10_days_yyyymmdd)
        ziyacode=self.get_argument('ziyacode','')

        if ziyacode=='':
            self.fire_response_bad_response()
            return

        where={
            "invite_code":ziyacode
        }
        # log.info("where:"+str(where))
        filter={
            "_id":0,
            "username":1,
            "nick":1,
            "gps_info":1,
            "invite_code":1,
            "avatar_url":1
        }
        user=MongoFront.find_one(where,"users",filter=filter)

        if user:

            where={
                "statics_yymmdd":{"$gte":datemin,"$lte":datemax},
                "username":user["username"]
            }
            # log.info("where2:"+str(where))
            sorted=[('statics_yymmdd', pymongo.DESCENDING)]
            recommend_user_statistics=list(MongoFront.find_all_sorted(where,"recommend_award_statics",sorted=sorted)) or []

            response={
                "result":"ok",
                "user":user,
                "entities":recommend_user_statistics
            }
        else:
            response={
                "result":"1",  ####子牙号没有查询到对应用户
                "entities":[]
            }
        self.write(json.dumps(response,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()


    def fire_response_bad_response(self):
        """
        返回登录请求错误响应
        """
        self.set_status(400)
        response = {}
        response["error"] = "invalid_date"
        response["error_description"] = "invalid date"
        self.write(json.dumps(response, indent=2, ensure_ascii=False))
        self.finish()
