#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2014-12-03 20:35:12
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$

import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import re
import hashlib
import datetime
import hashlib
import random
import time
from log import get_logger
from model.accounts import Account
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from handler_baseHt import BaseHtHandler
from utils.mongo_front import MongoFront
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from tornado.httpclient import HTTPRequest
import hashlib
from bson import ObjectId
from tornado import gen
from auth import requires_auth

try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()


class ProductUrlHandler(BaseHtHandler):
    """
       获取链接详情
    """

    def __init__(self, application, request, **kwargs):
        super(ProductUrlHandler, self).__init__(application, request, **kwargs)


    @asynchronous
    @gen.coroutine
    def post(self):
        log.info("ProductUrlHandler.post is called:"+ str(self.request.body))
        try:
            request_dic={}
            request_url = options.fish_front_end_server + "/product_url_detail"
            body_dic = json.loads(self.request.body, encoding="utf-8")
            url = body_dic.get("url","")
            print url
            username = body_dic.get("username","")
            request_dic["url"] = url
            account_where = {
                "username":username
            }
            accounts_temp = MongoFront.find_one(account_where,"accounts")
            token=""
            if accounts_temp:
                token = accounts_temp["token"]
            else:
                self.fire_response_bad_content("commen_error","user not exists","用户信息不存在")
                return

            log.info("request_url=%s,request_dic=%s"%(request_url,request_dic))
            response = self.request_post_json(request_url,request_dic,token)
            result = yield response
            code = result.code
            if code == 200:
                result_dic = json.loads(result.body, encoding='utf-8')
                log.info("result_dic" + str(result_dic))
                self.set_status(result.code)
                self.write(result_dic)
                self.finish()
            else:
                response_dic = json.loads(result.body, encoding='utf-8')
                log.info("response_dic" + str(response_dic))
                error_description = response_dic.get("error_description","change error")
                error = response_dic.get("error","")
                content = response_dic.get("content","修改异常")
                self.fire_response_bad_content(error,error_description,content)
                return

        except Exception as e:
            log.error("EntertainOrderHandler exception:" + e.message)
            log.error(traceback.format_exc())
            self.fire_response_sys_error()
    '''
        修改鱼获的product_detail
    '''
    @asynchronous
    @gen.coroutine
    def put(self):
        log.info("ProductUrlHandler.post is called:"+ str(self.request.body))
        try:
            request_dic={}
            body_dic = json.loads(self.request.body, encoding="utf-8")
            product = []
            request_url = options.fish_front_end_server + "/product_url_detail"
            url = body_dic.get("url","")
            username = body_dic.get("username", "")
            request_dic["url"] = url
            account_where = {
                "username": username
            }
            accounts_temp = MongoFront.find_one(account_where, "accounts")
            if accounts_temp:
                token = accounts_temp["token"]
            else:
                self.fire_response_bad_content("commen_error", "user not exists", "用户信息不存在")
                return

            log.info("request_url=%s,request_dic=%s" % (request_url, request_dic))
            response = self.request_post_json(request_url, request_dic, token)
            result = yield response
            code = result.code
            result_dic = {}
            if code == 200:
                result_dic = json.loads(result.body, encoding='utf-8')
            else:
                self.fire_response_sys_error()
                return

            product_detail_array = result_dic.get("entities","")
            if product_detail_array:
                post_id = body_dic.get("post_id","")
                where = {
                    "_id":ObjectId(post_id)
                }
                update_val = {
                    "$set":{
                        "product_detail_array":product_detail_array
                    }
                }
                MongoFront.update(where,update_val,"posts")
                response = {
                    "result": "ok"
                }
                self.write(response)
                self.finish()

        except Exception as e:
            log.error("EntertainOrderHandler exception:" + e.message)
            log.error(traceback.format_exc())
            self.fire_response_sys_error()

    '''
    删除鱼获的product_detail
    '''

    @asynchronous
    @gen.coroutine
    def delete(self):
        log.info("ProductUrlHandler.post is called:" + str(self.request.body))
        try:
            request_dic = {}
            body_dic = json.loads(self.request.body, encoding="utf-8")
            post_id = body_dic.get("post_id", "")
            where = {
                "_id": ObjectId(post_id)
            }
            update_val = {
                "$unset": {
                    "product_detail_array": ""
                }
            }
            MongoFront.update(where, update_val, "posts")
            response = {
                "result": "ok"
            }
            self.write(response)
            self.finish()

        except Exception as e:
            log.error("EntertainOrderHandler exception:" + e.message)
            log.error(traceback.format_exc())
            self.fire_response_sys_error()