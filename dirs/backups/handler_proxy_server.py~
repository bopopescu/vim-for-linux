#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
import pymongo
import time
from log import get_logger
from model.accounts_ht import Account_ht
from model.users import Users
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from tornado import gen
from services.service_activity import *
from services.service_houtai_use_log import *
from utils.secret import *
from auth import requires_auth
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class ProxyServerHandler(BaseHtHandler):
    @asynchronous
    @tornado.gen.engine
    @requires_auth
    def get(self):
        log.info("ProxyServerHandler.get:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")

        url = self.request.uri.replace(" ", "")
        server_url = url[25:]

        if "/posts/" in server_url or "/users/" in server_url or "/groups/" in server_url:
            server_url = self.get_argument('server_url',"")
        server_url=server_url.replace('&%22%22',"")

        token = self.request.headers.get("Authorization", None)
        headers = {}
        if token!=None:
             headers["Authorization"] = token
        log.info("server_url:"+server_url)
        
        request = HTTPRequest(url=server_url,\
                              method="GET", \
                              headers=headers,\
                              follow_redirects=False,\
                              request_timeout=10000)
        
        response=yield gen.Task(AsyncHTTPClient().fetch,request)

        # log.info("response.code:"+str(response.code))
        # if response.body:
        #     log.info("response.body:"+response.body+"  code:"+str(response.code))
        
        self.write(response.body)
        # self.write("{'ab':21}")
        self.finish()
        
    @asynchronous
    @tornado.gen.engine
    @requires_auth
    def post(self):
        log.info("ProxyServerHandler.post:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")
        
        
        server_url = self.get_argument('server_url',"")
        if server_url == "http://group.ziyadiaoyu.com/groups":
            server_url = "http://group.ziyadiaoyu.com/groups?from=ht"
        username =  self.get_argument('username',"")
        token = self.request.headers.get("Authorization", None)
        headers = {}
        if token!=None:
             headers["Authorization"] = token
        log.info("server_url:"+server_url)
        
        request = HTTPRequest(url=server_url,\
                              method="POST", \
                              headers=headers,\
                              body=self.request.body, \
                              follow_redirects=False)

        response=yield gen.Task(AsyncHTTPClient().fetch,request)

        # log.info("response.code:"+str(response.code))
        # if response.body:
        #     log.info("response.body:"+response.body+"  code:"+str(response.code))

        self.set_status(response.code)
        self.write(response.body)
        # self.write("{'ab':21}")
        self.finish()

        if response.code==200:
            other_info=None
            if token!=None:
                token_username=self.getUsernameByToken(token)
                if token_username:
                    other_info={}
                    other_info["token_username"]=token_username

            saveUseLog(self,other_info)
        # ary = server_url.split("/")
        # act = ary[-1]
        # type=""
        # if is_log(act,"post"):
        #     request_dic = json.loads(self.request.body,encoding="utf-8")
        #     post_id=request_dic.get("post_id","")
        #     post_type = request_dic.get("type","")
        #     if post_id=="" and response.body:
        #        res = json.loads(response.body,encoding="utf-8")
        #        post = res.get("entities")
        #        post_id =  post.get("_id","")
        #        log.info("post_id:"+post_id)
        #        post_type = post.get("post_type","")
        #     savePostActivity(post_id,unicode(self.username),unicode(username),act,post_type=post_type)


    @asynchronous
    @tornado.gen.engine
    @requires_auth
    def put(self):
        log.info("ProxyServerHandler.put:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")

        server_url = self.get_argument('server_url',"")
        username =  self.get_argument('username',"")
        token = self.request.headers.get("Authorization", None)
        headers = {}
        if token!=None:
             headers["Authorization"] = token
        log.info("server_url:"+server_url)

        request = HTTPRequest(url=server_url,\
                              method="PUT", \
                              headers=headers,\
                              body=self.request.body, \
                              follow_redirects=False)

        response=yield gen.Task(AsyncHTTPClient().fetch,request)

        # if response.body:
        #     log.info("response.body:"+response.body+"  code:"+str(response.code))

        self.write(response.body)
        # self.write("{'ab':21}")
        self.finish()

        ary = server_url.split("/")
        act = ary[-1]
        type=""
        if is_log(act,"post"):
            request_dic = json.loads(self.request.body,encoding="utf-8")
            post_id=request_dic.get("post_id","")
            post_type = request_dic.get("type","")
            if post_id=="" and response.body:
               res = json.loads(response.body,encoding="utf-8")
               post = res.get("entities")
               post_id =  post.get("_id","")
               log.info("post_id:"+post_id)
               post_type = post.get("post_type","")
            savePostActivity(post_id,unicode(self.username),unicode(username),act,post_type=post_type)
        
        
    @asynchronous
    @tornado.gen.engine
    @requires_auth
    def delete(self):
        log.info("ProxyServerHandler.delete:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")

        server_url = self.get_argument('server_url',"")
        token = self.request.headers.get("Authorization", None)
        headers = {}
        if token!=None:
             headers["Authorization"] = token
        log.info("server_url:"+server_url)
        body = self.request.body
        request = HTTPRequest(url=server_url,\
                              method="DELETE", \
                              headers=headers,\
                              follow_redirects=False)
                             
        
        response=yield gen.Task(AsyncHTTPClient().fetch,request)

        # if response.body:
        #     log.info("response.body:"+response.body+"  code:"+str(response.code))
        
        self.write(response.body)
        # self.write("{'ab':21}")
        self.finish()
    


    def fire_response_bad_response(self):
        """
        返回登录请求错误响应
        """
        self.set_status(400)
        response = {}
        response["error"] = "invalid_grant"
        response["error_description"] = "invalid username or password"
        self.write(json.dumps(response, indent=2, ensure_ascii=False))
        self.finish()

    def getUsernameByToken(self,token):
        try:
            token = token.split(' ')[1]
            real_token=decrypt(token,'1qaznbchat6yhn86')
            token_array=real_token.split(":")
            return token_array[0]
        except:
            return ""
