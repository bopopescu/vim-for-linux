#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
from bson import ObjectId
import random
import time
from log import get_logger
from model.advices import Advice
from model.permissions_ht import Permissions_ht
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_weibo_client import RedisWeiboClient
from utils.mongo_front import MongoFront
from mongo_field_encoder import MongoFieldEncoder
from services.service_activity import *
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado import gen
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from services.service_fishing_place import *
import pymongo
from auth import requires_auth
from services.service_admin_log import save_log

try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()


class OfficalRecomendHandler(BaseHtHandler):
    @requires_auth
    @asynchronous
    def get(self):
        log.info("OfficalRecomendHandler.get:" + str(self.request.arguments))
        try:

            draft = self.get_argument('draft', 0)

            if draft:
                # 草稿
                where = {"status":1}
                sort = {"created":-1}
                recommend_temp = MongoFront.find_one(where,"offical_recommend_draft")
                offical_recommend = [
                    recommend_temp
                ]
                response = {}
                response["entities"] = offical_recommend
                self.write(json.dumps(response, indent=2, ensure_ascii=False, cls=MongoFieldEncoder))
            else:
                curr = self.get_argument('curr', '1')
                limit = int(self.get_argument('limit', '10'))
                where = {}
                sort = [("created", -1)]

                recomend_cursor = MongoFront.find_by_page(where, "offical_recommend", sort, (int(curr) - 1) * limit, int(limit))
                offical_recommend = []
                for recomend in recomend_cursor:
                    offical_recommend.append(recomend)

                response = {}
                response["entities"] = offical_recommend
                response["count"] = str(recomend_cursor.count())
                self.write(json.dumps(response, indent=2, ensure_ascii=False, cls=MongoFieldEncoder))
            self.finish()
        except Exception as e:
            log.info('OfficalRecomendHandler.get Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return

    # @requires_auth
    @asynchronous
    def post(self):
        log.info("OfficalRecomendHandler.post:" + str(self.request.body))
        try:
            body_dic = json.loads(self.request.body, encoding="utf-8")
            recommend_array = body_dic.get("recommend", [])
            target = int(body_dic.get("target", 0))  # 城市、活跃用户
            status = int(body_dic.get("status", 0))  # 1,草稿
            cities = body_dic.get("cities", "")
            province = body_dic.get("province", "")
            province_city = body_dic.get("province_city", [])
            days = body_dic.get("days", 0)
            push_text = body_dic.get("push_text", "")

            if not recommend_array or not target:
                self.fire_response_error_info("error", "data error!")
                return
            user = self.me
            username = user["username"]
            real_name = user["real_name"]
            insert_data = {
                "recommend_array": recommend_array,
                "target": target,
                "created": datetime.datetime.utcnow(),
                "actor":username,
                "real_name":real_name
            }
            if push_text:
                insert_data["push_text"] = push_text
            if target==1 and days:
                insert_data["days"] = days
            if target==2 and cities:
                insert_data["cities"] = cities
                insert_data["province"] = province
                insert_data["province_city"] = province_city
            # 存草稿
            if status:
                insert_data["status"] = status
                MongoFront.remove({"status":1},"offical_recommend_draft")
                MongoFront.insert(insert_data, "offical_recommend_draft")
            else:
                MongoFront.insert(insert_data, "offical_recommend")
                MongoFront.remove({"status":1},"offical_recommend_draft")
                self.pushRedis(target,cities,days,recommend_array,push_text)
            response = {}
            response["entities"] = "ok"
            self.write(json.dumps(response, indent=2, ensure_ascii=False, cls=MongoFieldEncoder))
            self.finish()

        except Exception as e:
            log.info('OfficalRecomendHandler.post Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return

    def pushRedis(self,target,cities,days,recommend_array,push_text):
        message_event = {}
        message_event["message_type"] = "offical_recommend"
        message_event["user_target"] = target
        message_event["cities"] = cities
        message_event["recommend"] = recommend_array
        if days:
            message_event["days"] = int(days)

        if push_text:
            message_event["push_text"] = push_text


        #### 保存消息监控表
        message_monitor_entity={
            "created":datetime.datetime.utcnow(),
            "begin_milli":int(round(time.time() * 1000)),
            "message_event":message_event
        }
        id,db_error=MongoFront.insert(message_monitor_entity,"message_monitor")
        # log.info("id:"+str(id))
        message_event['message_monitor_id']=str(id)

        message_event = json.dumps(message_event,
                          indent=2,
                          ensure_ascii=False,
                          cls=MongoFieldEncoder)

        # 个推信息
        queue_name=options.redis_queue_message_offical_recommend
        log.info("insert queue:%s"%queue_name)
        log.info("insert message_event:%s"%message_event)
        result =RedisWeiboClient.rpush(queue_name,message_event)