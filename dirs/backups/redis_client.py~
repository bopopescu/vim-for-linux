#!/usr/bin/env python
# -*- coding: utf-8 -*-


import redis
import globalConfig

pool = redis.ConnectionPool(host=globalConfig.redis_ip,port=globalConfig.redis_port,db=globalConfig.redis_db,retry_on_timeout=True)
r = redis.StrictRedis(connection_pool=pool)  

class RedisClient:
    @staticmethod
    def init():
        global pool
        global r
        pool = redis.ConnectionPool(host=globalConfig.redis_ip,port=globalConfig.redis_port,db=globalConfig.redis_db,retry_on_timeout=True)
        r = redis.StrictRedis(connection_pool=pool)  

    @staticmethod
    def setex(key,expire,value):
        global r
        r.setex(key, expire,value)

    @staticmethod
    def set(key,value):
        global r
        r.set(key, value)

    @staticmethod
    def get(key):
        global r
        return r.get(key)

    @staticmethod
    def has_key(key):
        global r
        return r.exists(key)

    @staticmethod
    def incr(key,expire_second,amount=1):
        cnt=r.incr(key,amount)
        if expire_second!=None:
            r.expire(key, expire_second)
        return cnt

    ####批量加n
    @staticmethod
    def batchIncr(keys,expire_second=0,amount=1):
        pipeline_redis = r.pipeline()
        for key in keys:
            pipeline_redis.incr(key,amount)
            if expire_second==0:
                expire_second=3600*24*5
            pipeline_redis.expire(key, expire_second)

        pipeline_redis.execute()

    @staticmethod
    def batchInsertList(key,value_list):
        pipeline_redis = r.pipeline()
        for value in value_list:
            pipeline_redis.rpush(key,value)

        pipeline_redis.execute()

    @staticmethod
    def hset(name,key,value):
        r.hset(name,key,value)

    @staticmethod
    def hget(name,key):
        return r.hget(name,key)

    @staticmethod
    def rpush(queue_name,value):
        return r.rpush(queue_name,value)

    @staticmethod
    def blpop(queue_name):
        return r.blpop(queue_name)