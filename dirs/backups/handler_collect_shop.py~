#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division
from access_track import access_log
import tornado.web
from tornado.web import asynchronous
from tornado.options import options

from mongokit import *
from mongokit.helpers import totimestamp, fromtimestamp
import pymongo
from mongo_field_encoder import MongoFieldEncoder
from handler_base import BaseHandler
from services.service_post import *
from auth import requires_auth
import traceback
import json
import bson
from bson import ObjectId
import datetime
import time
import random
from log import get_logger
from utils.mongo_client import MongoClient
from model.posts import Post
from model.user_collect_post import User_collect_post
from utils.redis_client import RedisClient
from services.service_activity import *
from services.service_fishing_shop import getShopList, getCollectShopList

log = get_logger()

class ShopCollectHandler(BaseHandler):
    """
    渔具店收藏处理类
    """
    def __init__(self, application, request, **kwargs):
        super(ShopCollectHandler, self).__init__(application, request, **kwargs)

    @asynchronous
    @requires_auth
    @access_log
    def post(self):
        log.info('ShopCollectHandler.post is called:'+str(self.request.body))
        body_dic = json.loads(self.request.body)
        shop_id = body_dic.get("id", '')
        if not shop_id:
            self.fire_response_bad_content("parameter_error", "id is the necessary parameter", "缺少参数")
            return

        username = self.username
        lookup = {
            "_id": ObjectId(shop_id),
            "deleted": {"$ne": True},
        }
        shop = MongoClient.find_one(lookup, "fishing_store")
        if not shop:
            self.fire_response_bad_content("common_error", "shop not exists", "渔具店不存在")
            return
 
        curr_date = datetime.datetime.utcnow()
        where = {
            'shop_id': shop_id,
            'username': unicode(self.username)
        }

        collect_shop = MongoClient.find_one(where, "user_collect_shop")
        if collect_shop:
            self.fire_response_bad_content("common_error", "user has collected this shop", "已经收藏")
            return
        
        update = {
                'username': unicode(self.username), 
                'shop_id': shop_id,
                'shop_created': shop['created'],
                'created': curr_date,
        }

        MongoClient.insert(update, "user_collect_shop")

        self.write("{}")
        self.finish()

        # 收藏后添加异步处理任务
        # if is_success:
            # user_act = {
                # "act": "shop_collect",
                # "username": self.username,
                # "shop_id": activity_id
            # }
            # user_act_string = json.dumps(user_act,
                                         # indent=2,
                                         # ensure_ascii=False,
                                         # cls=MongoFieldEncoder)
            # user_act_queue = options.queue_act
            # RedisClient.rpush(user_act_queue, user_act_string)


    @asynchronous
    @access_log
    @requires_auth
    def get(self):
        """
            我收藏的渔具店
        """
        log.info('shopCollectHandler.get is called'+str(self.request.arguments))
        username = self.username
        request_cursor = self.get_argument('cursor','')

        lookup = {
            'username': username,
        }
        if request_cursor:
            timestamp = fromtimestamp(int(request_cursor))
            lookup["created"] = {'$lt': timestamp}
            
        collect_lst, shop_cursor = getCollectShopList(lookup)
        shop_ids = [ObjectId(collect.get("shop_id")) for collect in collect_lst]
        shop_lookup = {}
        shop_lookup["status"] = 1
        shop_lookup["_id"] = {'$in': shop_ids}
        # 按收藏时间排序
        fishing_shop_array = MongoClient.find_all(shop_lookup, "fishing_store")
        fishing_shop_array = sorted(fishing_shop_array, key=lambda x: shop_ids.index(x["_id"]))

        response_dic = {}
        if shop_cursor:
            response_dic["cursor"] = shop_cursor

        response_dic["entities"] = fishing_shop_array
        response = json.dumps(response_dic,
                              indent=2,
                              ensure_ascii=False,
                              cls=MongoFieldEncoder)
        self.write(response)
        self.finish()

    @asynchronous
    @requires_auth
    @access_log
    def delete(self):
        shopid = self.get_argument('shop_id','')
        lookup = {
            'shop_id': shopid,
            'username': self.username,
        }

        try:
            MongoClient.delete(lookup, "user_collect_shop")
            self.finish()
        except Exception as e:
            self.set_status(400)
            response = {}
            response["error"] = "bad_request"
            response["error_description"] = e.message
            self.write(json.dumps(response, indent=2, ensure_ascii=False))
            self.finish()
