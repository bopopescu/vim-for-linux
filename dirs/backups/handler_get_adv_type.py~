#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
from tornado import gen
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
from services.service_post import *
import re
import hashlib
from bson import ObjectId
import random
import time
from log import get_logger
from model.biz_user import Biz_User
from model.permissions_ht import Permissions_ht
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from utils.mongo_front import MongoFront
from mongo_field_encoder import MongoFieldEncoder
from services.service_activity import *
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from services.service_image_cloud import *
import pymongo
from auth import requires_auth
from services.service_admin_log import save_log
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()

adv_dic = {
    "post_list": "4",
    "tool_list": "5",
    "article_list": "6",
}
class GetAdvType(BaseHtHandler):

    @asynchronous
    @requires_auth
    def get(self):
        log.info("GetAdvType.get is called:")
        area = self.get_argument('area', '')
        if area:
            if area in adv_dic.keys():
                filter = {
                    "code": 1,
                    "value": 1
                }
                where = {}
                if area == "post_list":
                    table = "post_list_place_property"
                if area == "tool_list":
                    table = "tool_list_place_property"
                if area == "article_list":
                    table = "article_list_place_property"
                ad_type_result = MongoFront.find_all(where, table, filter)
                response = {}
                response["entities"] = list(ad_type_result)
                self.write(json.dumps(response,indent=2, ensure_ascii=False, cls=MongoFieldEncoder))
                self.finish()

