#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
import pymongo
import time
from log import get_logger
from model.accounts_ht import Account_ht
from model.posts import Post
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_front import MongoFront
from utils.mongo_im import MongoIm
from utils.mongo_client import MongoClient
from services.service_post import getPostList
from services.service_activity import *
from bson import ObjectId
from auth import requires_auth
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class LastMessageChatHandler(BaseHtHandler):
    ###获取聊天详情
    @asynchronous
    @requires_auth
    def get(self):
        log.info("LastMessageChatHandler.get is called")
        from_username = self.get_argument('from',"")
        to_username = self.get_argument('to',"")

        session_id_array=[from_username,to_username]
        session_id_array.sort()
        session_id=''.join(session_id_array)

        log.info("to:"+to_username)
        session_lookup={
            "session_id":session_id,
            "to":from_username
        }
        log.info("session_lookup:"+str(session_lookup))

        sort = [('created', pymongo.DESCENDING)]

        session_cursor=MongoIm.find(session_lookup,"messages",sort,0,1)


        last_time=0
        if session_cursor is not None:
            for session in session_cursor:
                last_time=session["time"]
                log.info("last_time:"+str(last_time))

        response={}
        response["last_time"]=last_time
        self.write(json.dumps(response,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()

    ###获取聊天详情
    @asynchronous
    @requires_auth
    def put(self):
        log.info("SessionDetailHandler.put is called")
        body_dic = json.loads(self.request.body,encoding="utf-8")
        session_id=body_dic["session_id"]


        session_lookup={
            "session_id":session_id
        }
        update_value={
            "$set":{
                "status":"read"
            }
        }
        MongoIm.update(session_lookup,update_value,"session_im")

        self.write(json.dumps({},indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()