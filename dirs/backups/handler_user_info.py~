#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2014-12-04 10:43:14
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$

from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
from bson import ObjectId
import random
import time
from log import get_logger
from model.comment import Comment
from model.activities import Activities
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from utils.mongo_front import MongoFront
from mongo_field_encoder import MongoFieldEncoder
from model.posts import Post
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from services.service_user import *
import pymongo
from auth import requires_auth

try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()


class UserInfoHandler(BaseHtHandler):
    def __init__(self, application, request, **kwargs):
        super(UserInfoHandler, self).__init__(application, request, **kwargs)

    """
    用户信息
    """

    @asynchronous
    @requires_auth
    def get(self, mobile=None):
        log.info("UserHandler.get is called")

        if mobile is not None:
            mobile = mobile[1:]
            self.fetch_user(mobile)

    def fetch_user(self, mobile):
        if mobile is '':
            self.fire_response_bad_response()
            return

        try:
            where = {
                "mobile": mobile,
                "freeze_status": {"$ne": "2"}
            }
            filter = {"_id": 0, "invite_source": 0, "location": 0, "ip_info": 0, "dynamic_gps": 0, "status": 0}
            user = MongoFront.find_one(where,"users", filter)

            if user is None:
                self.fire_response_bad_user_invalid()
                return

            user["credits"] = int(user["credits"])
            username = user["username"]
            if user.has_key("mobile"):
                if len(user["mobile"]) >= 13:
                    del user["mobile"]

            user["binding"] = 0
            mobile = user.get("mobile", "")
            if mobile != "":
                user["binding"] = 1  # 1：绑定    0：未绑定

            # 是否关注该用户
            user_array = get_userFollow(self.username, [user["username"]], [user])
            where = {
                "deleted": {"$ne": True},
                "actor.username": username,
                "yuhuo_type": 0
            }
            post_count = MongoClient.count(where, "posts")
            user["post_count"] = post_count

            result_dic = {
                "entities": user_array
            }

            self.write(json.dumps(result_dic, indent=2, ensure_ascii=False, cls=MongoFieldEncoder))
            self.finish()
        except:
            log.error(traceback.format_exc())
            self.fire_response_bad_response()



    def sex_update_limit_response_bad_response(self):
        self.set_status(400)
        response = {}
        response["error"] = "sex_update_limit"
        response["error_description"] = "the count of sex update is limited"
        self.write(json.dumps(response, indent=2, ensure_ascii=False))
        self.finish()

    def fire_response_bad_response(self):
        self.set_status(400)
        response = {}
        response["error"] = "bad_request"
        response["error_description"] = "invalid data"
        self.write(json.dumps(response, indent=2, ensure_ascii=False))
        self.finish()

    def fire_response_bad_user_invalid(self):
        self.set_status(400)
        response = {}
        response["error"] = "user_invalid"
        response["error_description"] = "user is not exist"
        self.write(json.dumps(response, indent=2, ensure_ascii=False))
        self.finish()


