#!/usr/bin/env python
# -*- coding: utf-8 -*-
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
from bson import ObjectId
import random
import time
from log import get_logger
from model.advices import Advice
from model.permissions_ht import Permissions_ht
 
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from utils.mongo_front import MongoFront
from utils.mongo_client import MongoClient
from mongo_field_encoder import MongoFieldEncoder
from services.service_activity import *
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
import pymongo
from auth import requires_auth
from services.service_admin_log import save_log
from services.service_fishing_place import *
from tornado import gen
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()


class LocationShopErrorHandler(BaseHtHandler):
    #@requires_auth
    @asynchronous
    def get(self):
        log.info("LocationShopErrorHandler.get:" + str(self.request.arguments))
        try:
            # 分页
            curr = self.get_argument('curr', '1')
            # 反馈类型 shop place
            types = self.get_argument("types")
            # fishing_report_error id
            error_id = self.get_argument("error_id", "")
            classes = self.get_argument("classes", "")
            # 1老板认领 img 4 钓场信息有误 图片信息 点击可放大
            img = []
            error_info = ''
            if classes == "4":
                # 反馈内容 名称 位置 地址 电话 钓场类型 收费类型 营业时间
                error_info = self.get_content(types, error_id)

            limit = int(self.get_argument('limit', '10'))
            where = {"types": types, "status": "0"}
            if classes:
                where["classes"] = classes
            if error_id:
                where["_id"] = ObjectId(error_id)

            # 分页
            error_list = MongoFront.find_all(where, "fishing_report_error")[(int(curr)-1)*limit: limit]

            # 反馈信息
            fishing_shop = []
            for error in error_list:
                dic = {}
                # 用户信息
                dic["actor"] = self.get_userinfo(error.get("username"))
                dic["id"] = error.get("fish_id","")
                if error.get("fish_id",""):
                    log.info(error.get("fish_id",""))
                    fish_obj = MongoFront.find_one({"_id": ObjectId(error.get("fish_id"))}, "fishing_%s" % types)
                    if not fish_obj:continue
                    dic["name"] = fish_obj.get("name")
                dic["error_id"] = error.get("_id","")
                dic["classes"] = error.get("classes", "")
                dic["desc"] = error.get("error_desc", "")
                dic["created"] = error.get("created", "") 
                dic["types"] = types 
                dic["img"] = error.get("img", "")
                # 类型为四时有哪些不一样
                dic["error_info"] = error_info
                fishing_shop.append(dic)

            response = {}
            response["entities"] = fishing_shop
            # count 一共有多少数据
            response["count"] = fishing_shop.count()
            self.write(json.dumps(response, indent=2, ensure_ascii=False, cls=MongoFieldEncoder))
            self.finish()

        except Exception as e:
            log.info('LocationShopErrorHandler.get Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return


    def get_content(self, types, error_id):
        """ 获取钓场/渔具店 不一样的数据列表
        """
        if not error_id:
            return ''
        error_info = MongoClient.find_one({"id": error_id}, "fishing_report_error")
        content = error_type.get(types)

        update_val = {
                "price": "价格为:{}",
                "unit": "单位为:{}",
                "begin_time": "营业开始时间为:{}",
                "end_time": "营业结束时间:{}",
                "desc": "描述有误:{}",
                "gps_info": "地理位置有误:{}",
                "contact_tel": "电话号码有误:{}",
        }

        content_list = [update_val[error_key].format(error_value) for error_key, error_value in error_info.items()]
        return content_list

    def get_userinfo(self, username):
        """ 获取用户信息
        """
        actor_user = MongoFront.find_one({"username": username}, 'users')
        actor = {
                    "username": username,
                    "nick": actor_user.get("nick", ""),
                    "advicer_avatar_url": actor_user.get("avatar_url", ""),
                    "invite_code": actor_user.get("invite_code", "")
        }
        return actor
     


    @requires_auth
    @asynchronous
    def delete(self,id):
        """
            核实已修改
        """
        log.info("LocationShopErrorHandler.delete:")
        try:
            if not id:
                self.fire_response_sys_error()
            body = json.loads(self.request.body, encoding="utf-8")
            # place_id = body["place_id"]
            place_id = id[1:]
            where = {
                "_id":ObjectId(place_id)
            }

            update = {
                "status":2
            }
            status = body.get("status","")
            if status:
                update["status"] = status

            update_val = {"$set":update}
            MongoFront.update(where,update_val,"fishing_place")
            response = {}
            response["entities"] = "ok"
            self.write(json.dumps(response, indent=2, ensure_ascii=False, cls=MongoFieldEncoder))
            self.finish()

        except Exception as e:
            log.info('FishingLocationHandler.get Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return
