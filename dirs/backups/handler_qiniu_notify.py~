#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2014-12-05 15:45:20
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$

from __future__ import division
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import copy
from mongokit import *
from mongokit.helpers import totimestamp, fromtimestamp
import pymongo
from mongo_field_encoder import MongoFieldEncoder
from handler_base import BaseHandler
from access_track import access_log
from services.service_waterfall_list import *
from services.service_user_waterfall_flow import *
from services.service_waterfall_flow_json import *
from utils.banner import *
from services.service_post_list_place_property import *
import traceback
import json
import bson
import datetime
import time
import random
from log import get_logger
from utils.redis_client import RedisClient
from utils.mongo_client import MongoClient
from utils.gps_info import *
log = get_logger()
from distutils.version import LooseVersion


class QiniuNotifyHandler(BaseHandler):
    """
    七牛回调
    """
    def __init__(self, application, request, **kwargs):
        super(QiniuNotifyHandler, self).__init__(application, request, **kwargs)
        self.bucket_domain = "http://fishimage.ziyadiaoyu.com/"

    @asynchronous
    @gen.coroutine
    def post(self):
        log.info("#####QiniuNotifyHandler.post begin" + str(self.request.body))

        body_dic = json.loads(self.request.body, encoding="utf-8")
        persistentId = body_dic.get("id", None)
        code = body_dic.get("code", 1)
        log.info("######code########"+str(code))
        self.write("{}")
        self.finish()
        if code ==0:
            items = body_dic.get("items", None)
            key = items[0].get("key","")
            if key:

                redis_result = RedisClient.get("persistentId:{0}".format(persistentId))
                if redis_result:
                    dynamic_url = self.bucket_domain+key
                    where = {
                        "_id": ObjectId(redis_result)
                    }

                    update_set_val = {
                        "page.0.dynamic_url": dynamic_url
                    }

                    update = {
                        "$set":update_set_val,
                        # "$unset":{"page.0.pre_dynamic_url":""}
                    }

                    MongoClient.update(where, update, "posts")
