#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-06-26 10:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
import pymongo
import time
from log import get_logger
from model.accounts_ht import Account_ht
from model.users import Users
import optionsSetting
import datetime
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
import copy
from services.service_statistic_area_date import *
from auth import requires_auth
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class StatisticAreaDateHandler(BaseHtHandler):
    @asynchronous
    @requires_auth
    def get(self):
        log.info("StatisticAreaDateHandler.get start")
        type=self.get_argument('type','all')

        log.info("type:"+type)
        condition = {}
        datemin = self.get_argument('datemin',None)
        datemax = self.get_argument('datemax',None)
        if datemin is None or datemax is None:
            self.fire_response_bad_request('datemin and datemax')
            return

        log.info("datemin:"+datemin)
        begin = int(datemin.replace("-",""))
        condition["statistic_date"]={"$gte":begin}


        log.info("datemax:"+datemax)
        end = int(datemax.replace("-",""))
        statistic_date = condition["statistic_date"]
        statistic_date["$lt"] = end
        condition["statistic_date"]=statistic_date
        log.info("condition:"+str(condition))

        field="$area"
        if type=="all":
            condition["area"]={
                "$in":[str("全国"),str("海外"),str("其他")]
            }

        if type=="provinces":
            condition["province"]={ "$exists" : True }

            field="$province"

        if type=="in_province":
            province_sel=self.get_argument('province_sel','安徽省')
            condition["province"]=province_sel

        if type=="sel_cities":
            city_sel=self.get_argument('city_sel','')
            log.info("city_sel:"+city_sel)
            city_array=city_sel.split(",")
            condition["area"]={
                "$in":city_array
            }

        if type=="top_20_cities":
            condition["province"]={ "$exists" : True }


        response={}
        ###按区域统计
        result=statisticByArea(condition,field=field)
        statistic_area_array=[]
        for statistic_area_data in result:
            log.info("statistic_area_data:"+str(statistic_area_data))
            statistic_area_array.append(statistic_area_data)

        response["area_data"]=statistic_area_array

        ###按日期统计
        result=statisticByDate(condition)
        statistic_date_array=[]
        for statistic_date_data in result:
            log.info("statistic_date_data:"+str(statistic_date_data))
            statistic_date_array.append(statistic_date_data)

        response["date_data"]=statistic_date_array


        response = json.dumps(response,
                                  indent=2,
                                  ensure_ascii=False,
                                  cls=MongoFieldEncoder)
        self.write(response)
        self.finish()

            
            
        
        