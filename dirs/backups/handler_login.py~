#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2014-12-03 20:35:12
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$

import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
import time
from log import get_logger
from model.accounts import Account
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from auth import requires_auth
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()


class LoginHandler(tornado.web.RequestHandler):
    """
    登录处理类
    """
    def __init__(self, application, request, **kwargs):
        super(LoginHandler, self).__init__(application, request, **kwargs)

    @requires_auth
    @asynchronous
    def post(self):
        log.info("LoginHandler.post:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")
        """
        用户登录处理
        """
        if self.request.body is '':
            self.fire_response_bad_response()
            return
        real_username=""
        body = json.loads(self.request.body, encoding='utf-8')
        try:
            lookup = {"$or":[{"mobile": body["username"]},{"username":body["username"]}],"activated":True}
            filters = {'_id':0}
            account = options.dbconn.Account.one(lookup, filters)
            if account is None:
#              or account["username"] == account["mobile"]:
                self.fire_response_bad_response()
                return
            real_username=account["username"]
        except:
            log.error(traceback.format_exc())
            self.fire_response_bad_response()
            return

        log.info("real_username:"+real_username)
        token = account.get("token",None)
        self.token_expire=account.get("token_expire",None)
 
         
        today = datetime.datetime.utcnow()
        if token !=None and token !="" \
               and self.token_expire !=None and self.token_expire!="" \
               and today < self.token_expire :
                 self.fire_response_login_ok(account["username"], token)
        else:
                self.create_token(account,token)




    def fire_response_bad_response(self):
        """
        返回登录请求错误响应
        """
        self.set_status(400)
        response = {}
        response["error"] = "invalid_grant"
        response["error_description"] = "invalid username or password"
        self.write(json.dumps(response, indent=2, ensure_ascii=False))
        self.finish()

    def fire_response_login_ok(self, username, token):
        """
        返回登录成功响应
        """
        user = options.dbconn.Users.find_one({'username':username})
        if user is not None:
            del user['_id']
            today = datetime.datetime.utcnow()
            response = {}
            response["access_token"] = token
            response["expires_in"] = str((self.token_expire-today).seconds)
            response["entities"] = [user]
            
            body = json.dumps(response, indent=2, ensure_ascii=False,cls=MongoFieldEncoder)
            self.set_status(200)
            self.write(body)
            self.finish()
        else:
            self.fire_response_bad_response()



    def create_token(self, account,token=None):
        """
        生成token
        """
        self.token_expire = datetime.datetime.utcnow() + datetime.timedelta(days=options.token_expire)
        token_raw = '%s:%s:%u:%s' % (account["username"], account["password"],
                                  time.mktime(self.token_expire.timetuple()),account["random"])
        token_encrypt = encrypt(token_raw,options.token_key)

        self.fire_response_login_ok(account["username"],token_encrypt)

        lookup = {'username':account["username"]}
        option = {'$set':{'token':token_encrypt, 'token_expire':self.token_expire}}
        account_update = options.dbconn.Account.find_and_modify(lookup, option)
        

            
