#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division
from access_track import access_log
import tornado.web
from tornado.web import asynchronous
from tornado.options import options

from mongokit import *
from mongokit.helpers import totimestamp, fromtimestamp
import pymongo
from mongo_field_encoder import MongoFieldEncoder
from handler_base import BaseHandler
from services.service_post import *
from auth import requires_auth
import traceback
import json
import bson
from bson import ObjectId
import datetime
import time
import random
from log import get_logger
from utils.mongo_client import MongoClient
from model.posts import Post
from model.user_collect_post import User_collect_post
from utils.redis_client import RedisClient
from services.service_activity import *
from services.service_fishing_place import getPlaceList
log = get_logger()

class MyPlaceCollectHandler(BaseHandler):
    """
        我的钓场收藏处理类
    """
    def __init__(self, application, request, **kwargs):
        super(MyPlaceCollectHandler, self).__init__(application, request, **kwargs)

    @asynchronous
    @access_log
    @requires_auth
    def get(self):
        """
            type: self,     我的钓场
        """
        log.info('MyPlaceCollectHandler.get is called'+str(self.request.arguments))
        username = self.username
        types = self.get_argument('type')
        lookup = {
            'username': username,
        }

        request_cursor = self.get_argument('cursor','')
        lookup["status"] = 1
        # 时间
        if request_cursor != '':
            timestamp = fromtimestamp(int(request_cursor))
            lookup["created"] = {'$lt': timestamp}

        fishing_place_array, place_cursor = getPlaceList(lookup, sort_key='created')

        response_dic = {}
        response_dic["entities"] = fishing_place_array

        if cursor:
            response_dic["cursor"] = place_cursor
        response = json.dumps(response_dic,
                              indent=2,
                              ensure_ascii=False,
                              cls=MongoFieldEncoder)
        self.write(response)
        self.finish()

    @asynchronous
    @requires_auth
    @access_log
    def delete(self):
        placeid = self.get_argument('id','')
        lookup = {
            'place_id': placeid,
            'username': self.username,
        }

        try:
            MongoClient.delete(lookup,"user_collect_place")
            self.finish()
        except Exception as e:
            self.set_status(400)
            response = {}
            response["error"] = "bad_request"
            response["error_description"] = e.message
            self.write(json.dumps(response, indent=2, ensure_ascii=False))
            self.finish()
