#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
from tornado import gen
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
from services.service_post import *
import re
import hashlib
from bson import ObjectId
import random
import time
from log import get_logger
from model.biz_user import Biz_User
from model.permissions_ht import Permissions_ht
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from utils.mongo_front import MongoFront
from mongo_field_encoder import MongoFieldEncoder
from services.service_activity import *
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from services.service_image_cloud import *
import pymongo
from auth import requires_auth
from services.service_admin_log import save_log
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class AdBizUserHandler(BaseHtHandler):
    '''
     商家信息修改
    '''
    @requires_auth
    @asynchronous
    def put(self):
        log.info("AdBizUserHandler.put:"+self.request.body)
        try:
            body_dic = json.loads(self.request.body,encoding="utf-8")

            ad_user_id = body_dic.get("ad_user_id", "")
            if ad_user_id:
                where = {
                    "_id":ObjectId(ad_user_id),
                    "status":0
                }
                update_val = {
                    "$set":{
                        "status":1
                     }
                }
                MongoFront.update(where,update_val,"ad_biz_user")
            response={}
            response["entities"]="ok"
            self.write(json.dumps(response,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
            self.finish()

        except Exception as e:
            log.error('ActivityBizUserHandler.put Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return


    @asynchronous
    @requires_auth
    def get(self):
        log.info("AdBizUserHandler.get is called:")
        # self.fetch_activity_biz_user_list()


        biz_type = int(self.get_argument('biz_type',1))
        where = {
            "status":0,
            "biz_type":biz_type
        }
        curr = self.get_argument('curr',"")
        # begin = self.get_argument('begin',None)
        # end = self.get_argument('end',None)
        # if begin!=None:
        #    begin_date = datetime.datetime.strptime(begin, "%Y-%m-%d")-datetime.timedelta(hours=8)
        #    where["created"]={"$gte":begin_date}
        #
        # if end!=None:
        #    # log.info("datemax:"+datemax)
        #    end_date = datetime.datetime.strptime(end, "%Y-%m-%d")-datetime.timedelta(hours=8)
        #    between={}
        #    if where.has_key("created"):
        #        between=where["created"]
        #
        #    between["$lte"]=end_date
        #    where["created"]=between

        mobile_num = self.get_argument('mobile_num',None)
        if mobile_num:
            where['mobile']=mobile_num
        limit=10
        if curr=="":
            biz_user_cursor = MongoFront.find(where,"ad_biz_user",'created',None,0,limit)
        else:
            biz_user_cursor = MongoFront.find(where,"ad_biz_user",'created',None,(int(curr)-1)*limit,limit)

        log.info("post_cursor:"+str(biz_user_cursor.count()))

        response={}
        response["entities"]=list(biz_user_cursor)
        response["count"]=str(biz_user_cursor.count())
        self.write(json.dumps(response,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()


