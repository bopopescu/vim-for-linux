#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2016-07-02 15:35:12
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$

import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import uuid
import json
import datetime
from utils.secret import *
import random
import time
from handler_base import BaseHandler
from mongo_field_encoder import MongoFieldEncoder
from log import get_logger
from tornado import gen
from services.service_activity import *
import optionsSetting
import traceback
import datetime
import tornado.httpclient
from utils.mongo_client import MongoClient
from tornado.httpclient import HTTPRequest
from tornado.httpclient import HTTPError
# from paramAuth import param_auth
from utils.redis_client import RedisClient
from utils.platform_info import Platform_info
from bson import ObjectId
from urllib import quote
import math
import hashlib
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()


class ActivityPayHandler(BaseHandler):
    """
    活动支付类
    """
    def __init__(self, application, request, **kwargs):
        super(ActivityPayHandler, self).__init__(application, request, **kwargs)

    @asynchronous
    @gen.coroutine
    def post(self):
        # '''
        # 1.校验订单有效性
        # 2.校验钓鱼券
        # 3.判断订单来源
        # '''
        log.info("ActivityPayHandler.post:"+str(self.request.body))
        if not self.username:
            error = "user no login"
            des = "user no login"
            self.fire_response_bad(error, des)
            return

        request_dic = json.loads(self.request.body, encoding="utf-8")

        pay_code=request_dic.get("code", None)
        if not pay_code:
            error = "weixin pay no login"
            des = "weixin pay no login"
            self.fire_response_bad(error, des)
            return
        channel = request_dic.get("channel", 1)
        app_id = request_dic.get("app_id", '')
        order_id = request_dic["order_id"]
        where = {"_id":ObjectId(order_id)}
        ziya_order = MongoClient.find_one(where,"ziya_order")

        if not ziya_order:
           error = "order_id_invalid"
           des = "order_id is invalid"
           self.fire_response_bad(error,des)
           return

        payment = ziya_order["payment"]
        payment_ary=["1","3"]
        if payment not in payment_ary:
            error = "order_id_invalid"
            des = "order_id is invalid"
            self.fire_response_bad(error, des)
            return

        status = int(ziya_order["status"])
        pay_status = int(ziya_order["pay_status"])
        pay_status_ary = [0,12]
        iswei = request_dic.get("iswei",0)

        if pay_status == 0 or (pay_status == 12 and status == 1):
            pass
        else:
            error = "common_error"
            des = "order have been paid"
            content = "订单已支付，请勿重复支付"
            self.fire_response_bad_content(error, des, content)
            return

        if status!=100:
            log.info("status"+str(status))
            log.info("pay_status" + str(pay_status))
            if status==1 and pay_status==12:
                pass
            else:
                log.info("status error "+order_id)
                error = "common_error"
                des = "order is invalid"
                content = "支付超时，请重新下单"
                self.fire_response_bad_content(error, des, content)
                return

        activities_item_id = ziya_order["activities_item_id"]
        join_people = int(ziya_order["join_people_count"])
        check,activity,item = check_join_activity(activities_item_id,join_people)
        if check=="2" or check=="5" :
            error = "common_error"
            des = "activity is invalid"
            content = "过了支付时间，请重新下单"
            self.fire_response_bad_content(error, des, content)
            return


        if pay_status==0:
            if check=="1":
                 error = "common_error"
                 des = "out of limit"
                 content = "支付超时，请重新下单"
                 self.fire_response_bad_content(error,des,content)
                 return
            elif check=="4":
                error = "common_error"
                des = "out of limit"
                content = "支付超时，请重新下单"
                self.fire_response_bad_content(error,des,content)
                return

        ticket_id = request_dic.get("ticket_id","")
        coupon_id = request_dic.get("coupon_id","")
        # 根据code获取openid chanel 区别appid
        try:
            login_info = yield Platform_info.getSecretByWinxin(pay_code, app_id)
        except:
            des = "access_code"
            self.fire_response_bad_request(des)
            return
        log.info("login_info="+str(login_info))
        ticket_value,coupon_value,recommend_username = get_ticket_coupon(ziya_order,activity,ticket_id,coupon_id,self.username)

        # log.info("ticket_value="+str(ticket_value))
        # log.info("coupon_value="+str(coupon_value))

        pay_order_id = order_id
        join_people_count = ziya_order["join_people_count"]
        price = ziya_order["price"]
        first_pay = ziya_order.get("first_pay",0)
        isblock = ziya_order["product_detail"].get("isblock", 0)
        if isblock != 1:
            coupon_value = coupon_value * join_people_count
        if payment=="1":
            pay = first_pay-ticket_value-coupon_value
        elif payment=="3":
            if pay_status==0:
                pay = int(first_pay)
            elif pay_status==12:
                pay = price - first_pay
                pay = pay - ticket_value - coupon_value
                pay_order_id=pay_order_id+"_w"


        host=self.request.host
        host_array=host.split(":")
        domain=host_array[0]

        pay_url = "http://localhost:10021"
        title = "子牙活动"
        ziya_order_update = {}

        openid= login_info.get("openid","")
        result = yield self.XCXPay(pay_url, pay_order_id, pay, title, pay_code, openid, app_id, channel)

        log.info("xcx_pay_result="+str(result))


        if ticket_value!=0:
            ticket_info = {
                "ticket_value":ticket_value,
                "ticket_id":ticket_id
            }
            ziya_order_update["ticket_info"] =ticket_info

        if coupon_value!=0:
             coupon_info = {
                "coupon_value":coupon_value,
                "coupon_id":coupon_id,
                "recommend_username":recommend_username
             }
             ziya_order_update["coupon_info"] =coupon_info

        if ziya_order_update!={}:
            update = {"$set":ziya_order_update}
            where = {"_id":ObjectId(order_id)}
            MongoClient.update(where,update,"ziya_order")
        # log.info(result)
        self.write(json.dumps(result, indent=2, ensure_ascii=False))
        self.finish()


    @gen.coroutine
    def httprequest(self,url,method,body={},http_header={}):
        http_request  = tornado.httpclient.HTTPRequest(url=url,
                                               method=method,
                                               headers=http_header,
                                               body=json.dumps(body, ensure_ascii=False),
                                               use_gzip=True,
                                               connect_timeout=1000,
                                               request_timeout=1000)
        response = {}
        http_client   = tornado.httpclient.HTTPClient()
        try:
             response = http_client.fetch(http_request)
        except HTTPError as exception:
            pass
        raise gen.Return(response)




    @gen.coroutine
    def XCXPay(self,pay_url,order_id,pay,title,pay_code,openid, app_id=None, channel=None):
        url = pay_url+"/xcxPay"
        body = {
                "pay_code":pay_code,
                "order_id":order_id,
                "price":pay,
                "title":title,
                "openid":openid,
                "channel":channel,
                "app_id":app_id,
            }
        response = yield self.httprequest(url,"POST",body)
        result = {"result":0}
        if response and response.code==200:
            result=json.loads(response.body, encoding="utf-8")
        raise gen.Return(result)

