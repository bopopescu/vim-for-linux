#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
from auth import requires_auth
import pymongo
import time
from log import get_logger
from model.message_push_control import Message_Push_Control
from model.permissions_ht import Permissions_ht
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from utils.mongo_front import MongoFront
from bson.objectid import ObjectId
from services.service_fishing_place import get_image_info
import re

try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()

class ArticleModifyHandler(BaseHtHandler):

    def __init__(self, application, request, **kwargs):
        super(ArticleModifyHandler, self).__init__(application, request, **kwargs)

    @requires_auth
    @asynchronous
    def post(self):
        log.info("ArticleModifyHandler.post is called:+"+self.request.body)
        try:
            body_dic = json.loads(self.request.body,encoding="utf-8")
            article_id = body_dic.get("article_id", None)
            key = body_dic.get("key", None)
            if article_id is None:
                self.fire_response_bad_request(self, article_id)
                return
            # 查询条件
            where = {
                "_id": ObjectId(article_id),
            }
            data_filter = {
                "_id": 0,
                "images": 1
            }
            result = MongoFront.find_one(where, "article", data_filter)

            if key=="created":
                up_val = {
                    "created":datetime.datetime.utcnow()
                }
                update = {
                    "$set":up_val
                }

                if result.get("images", []):
                    new_images = self.edit_image(result.get("images", []))
                    new_images_dic = {"images": new_images}
                    update["$set"].update(new_images_dic)
                MongoFront.update(where, update, "article")
            response = {"result": "1"}
            self.write(json.dumps(response,
                              indent=2,
                              ensure_ascii=False))
            self.finish()
        except Exception as e:
            log.error('ArticleModifyHandler.post Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return

    @staticmethod
    def edit_image(images):
        if images:
            image_url = images[0].get("image_url", "")
            if image_url:
                image_url1 = re.sub("[?].+", "", image_url)
                cover, flag = get_image_info(image_url1)
                if flag:
                    cover["image_url"] = image_url
                    images[0] = cover
        return images
