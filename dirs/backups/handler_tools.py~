#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
from services.service_post import *
import re
import hashlib
from bson import ObjectId
import random
import time
from log import get_logger
from model.advices import Advice
from model.permissions_ht import Permissions_ht
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from utils.mongo_front import MongoFront
from mongo_field_encoder import MongoFieldEncoder
from services.service_activity import *
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
import pymongo
from auth import requires_auth
from services.service_admin_log import save_log
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class ToolsHandler(BaseHtHandler):
     '''
     设置成装备渔获
     '''
     @requires_auth
     @asynchronous
     def put(self):
        log.info("ToolsHandler.put:"+self.request.body)
        try:
            body_dic = json.loads(self.request.body,encoding="utf-8")
            post_id = body_dic.get("post_id",None)
            if not post_id:
                self.fire_response_bad_request("post_id")
                return

            post_id_array=post_id.split(",")

            for post_id in post_id_array:
                lookup = {"_id": ObjectId(post_id)}

                updated={
                    '$unset':{
                        'sold_out':'',
                        'deleted':'',
                    },
                    '$set':{
                        'yuhuo_type':1
                    }
                }
                post=MongoFront.find_and_modify(lookup,updated,"posts")

                if post:
                    actor_username=post["actor"]["username"]

                    where={
                        "username":actor_username,
                        "post_count":{"$gt":0}
                    }

                    updated={
                        "$inc":{"post_count":-1,"tools_count":1}
                    }
                    MongoFront.update(where,updated,"users")

                    #删除渔获搜索表
                    where = {"post_id": post_id}
                    MongoFront.remove(where,"posts_search")

                    ##从redis最新渔获集合中删除
                    RedisClient.removeToList(options.new_post_list,post_id)
                    ##从redis精品渔获集合中删除
                    RedisClient.removeToList(options.boutique_post_list,post_id)


                    ####给用户发通知消息
                    to_usernames = [post["actor"]["username"]]
                    message_event = {}
                    message_event["message_type"] = "set_tools"
                    message_event["target"] = "apoint"
                    message_event["content"] = "你的渔获分配到了装备栏目,呈现给正在需要钓鱼装备的人"
                    message_event["to_usernames"] = to_usernames

                    #### 保存消息监控表
                    message_monitor_entity={
                        "created":datetime.datetime.utcnow(),
                        "begin_milli":int(round(time.time() * 1000)),
                        "message_event":message_event
                    }
                    id,db_error=MongoFront.insert(message_monitor_entity,"message_monitor")

                    message_event["message_monitor_id"]=id

                    message_event = json.dumps(message_event,
                                      indent=2,
                                      ensure_ascii=False,
                                      cls=MongoFieldEncoder)
                    queue_name=options.redis_queue_message_event
                    log.info("insert queue:%s"%queue_name)
                    log.info("insert message_event:%s"%message_event)
                    result =RedisClient.rpush(queue_name,message_event)

            response = {"entities":[]}
            self.write(json.dumps(response,
                                  indent=2,
                                  ensure_ascii=False,
                                  cls=MongoFieldEncoder))
            self.finish()
        except Exception as e:
            log.info('DeletePostHandler.put Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return



     @asynchronous
     @requires_auth
     def get(self):
        log.info("ToolsHandler.get is called:")
        where={
            'deleted': {'$ne': True},
            'sold_out': {'$ne': "1"},
            'yuhuo_type':1
        }

        limit=10
        curr = self.get_argument('curr',"")
        # log.info("curr:"+curr)
        datemin = self.get_argument('datemin',None)
        datemax = self.get_argument('datemax',None)
        if datemin!=None:
           # log.info("datemin:"+datemin)
           datemin = datetime.datetime.strptime(datemin, "%Y-%m-%d")-datetime.timedelta(hours=8)
           where["created"]={"$gte":datemin}

        if datemax!=None:
           # log.info("datemax:"+datemax)
           datemax = datetime.datetime.strptime(datemax, "%Y-%m-%d")-datetime.timedelta(hours=8)
           between={}
           if where.has_key("created"):
               between=where["created"]

           between["$lte"]=datemax
           where["created"]=between


        username = self.get_argument('username',None)
        if username!=None:
            # log.info("username:"+username)
            where['actor.username']=username

        tool_type = self.get_argument('tool_type',None)
        if tool_type!=None:
            where["tool_type"] = {"$in":[tool_type]}

        user_nick = self.get_argument('user_nick',None)
        if user_nick:
            user_where={
                "nick":re.compile(user_nick+'.*')
            }
            # log.info("user_where:"+str(user_where))
            users_cursor=MongoFront.find_all(user_where,"users")
            # log.info("users_cursor:"+str(users_cursor.count()))
            username_array=[]
            for user in users_cursor:
                username=user.get("username","")
                username_array.append(username)
            where["actor.username"]={
                "$in":username_array
            }


        admin = self.get_argument('admin',None)
        if admin!=None:
            user_list = getVestPostUser(admin,"posts",limit)
            where['actor.username'] = {"$in":user_list}

        condition = self.get_argument('condition',None)

        if condition!=None:
            condition_dic=json.loads(condition,encoding="utf-8")
            if condition_dic.has_key("ids"):
                ids=condition_dic["ids"]
                id_array=ids.split(",")
                objectIdArray=[]
                for id in id_array:
                    objectIdArray.append(ObjectId(id))
                where['_id'] = {"$in":objectIdArray}

        # sort_by = 'created'
        # sort_value =  pymongo.DESCENDING

        sort = [('tools_rank',pymongo.ASCENDING),('created', pymongo.DESCENDING)]
        # sort = [('created', pymongo.DESCENDING)]

        sort_get = self.get_argument("sort_by",None)
        if sort_get :
            sort_by = sort_get
            sort_value = int(self.get_argument('sort_value',-1))

            sort=[(sort_by,sort_value)]

        # log.info("usernmae:"+self.username+" where:"+str(where))
        log.info("sort:"+str(sort))
        if curr=="":
            post_cursor = options.dbconn.Post.find(where).sort(sort).limit(limit)
        else:
            post_cursor = options.dbconn.Post.find(where).sort(sort).skip((int(curr)-1)*limit).limit(limit)

        # log.info("post_cursor:"+str(post_cursor.count()))
        posts=[]
        if post_cursor!=None:
            posts = getPostList(post_cursor)
        response={}
        response["entities"]=posts
        response["count"]=str(post_cursor.count())
        self.write(json.dumps(response,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()

