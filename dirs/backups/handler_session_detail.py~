#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
import pymongo
import time
from log import get_logger
from model.accounts_ht import Account_ht
from model.posts import Post
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_front import MongoFront
from utils.mongo_im import MongoIm
from utils.mongo_client import MongoClient
from services.service_post import getPostList
from services.service_activity import *
from bson import ObjectId
from auth import requires_auth
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class SessionDetailHandler(BaseHtHandler):
    ###获取聊天详情
    @asynchronous
    @requires_auth
    def get(self):
        log.info("SessionDetailHandler.get is called")
        session_id = self.get_argument('session_id',"")

        if session_id:
            session_lookup={
                "session_id":session_id
            }


            sort = [('created', pymongo.DESCENDING)]

            session_cursor=MongoIm.find(session_lookup,"messages",sort,0,200)

            session_array=[]
            for session_obj in session_cursor:
                session_array.append(session_obj)
        else:
            to_username = self.get_argument('to',"")
            session_lookup={
                "to":to_username
            }


            sort = [('created', pymongo.DESCENDING)]

            session_cursor=MongoIm.find(session_lookup,"messages",sort,0,200)
            log.info("session_cursor:"+str(session_cursor.count()))

            session_array=[]
            for session_obj in session_cursor:
                session_array.append(session_obj)

        response={}
        response["entities"]=session_array
        response["count"]=str(session_cursor.count())
        self.write(json.dumps(response,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()

    ###获取聊天详情
    @asynchronous
    @requires_auth
    def put(self):
        log.info("SessionDetailHandler.put is called")
        body_dic = json.loads(self.request.body,encoding="utf-8")
        session_id=body_dic["session_id"]


        session_lookup={
            "session_id":session_id
        }
        update_value={
            "$set":{
                "status":"read"
            }
        }
        MongoIm.update(session_lookup,update_value,"session_im")

        self.write(json.dumps({},indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()