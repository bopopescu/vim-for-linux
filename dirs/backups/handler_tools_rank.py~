#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
from services.service_post import *
import re
import hashlib
from bson import ObjectId
import random
import time
from log import get_logger
from model.advices import Advice
from model.permissions_ht import Permissions_ht
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from utils.mongo_front import MongoFront
from mongo_field_encoder import MongoFieldEncoder
from services.service_activity import *
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
import pymongo
from auth import requires_auth
from services.service_admin_log import save_log
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class ToolsRankHandler(BaseHtHandler):
     '''
     设置成装备渔获
     '''
     @requires_auth
     @asynchronous
     def put(self):
        log.info("ToolsRankHandler.put:"+self.request.body)
        try:
            body_dic = json.loads(self.request.body,encoding="utf-8")
            post_id = body_dic.get("post_id",None)
            tools_rank = body_dic.get("tools_rank",None)
            if not post_id or not tools_rank:
                self.fire_response_bad_request("post_id and tools_rank")
                return

            ##1,将之前占据该rank的帖子的rank属性清除
            lookup1={
                "tools_rank":tools_rank
            }
            MongoFront.update(lookup1,{'$set':{"tools_rank":999}},"posts")

            updated={
                "$set":{
                    'tools_rank':tools_rank
                }
            }
            where={
                "_id":ObjectId(post_id)
            }

            MongoFront.update(where,updated,"posts")

            response = {"entities":[]}
            self.write(json.dumps(response,
                                  indent=2,
                                  ensure_ascii=False,
                                  cls=MongoFieldEncoder))
            self.finish()
        except Exception as e:
            log.info('DeletePostHandler.put Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return


     @asynchronous
     @requires_auth
     def delete(self):
        post_id = self.get_argument('post_id',None)

        if post_id:
            updated={
                "$set":{
                    'tools_rank':999
                }
            }
            where={
                "_id":ObjectId(post_id)
            }

            MongoFront.update(where,updated,"posts")

            response = {"entities":[]}
            self.write(json.dumps(response,
                                  indent=2,
                                  ensure_ascii=False,
                                  cls=MongoFieldEncoder))
            self.finish()