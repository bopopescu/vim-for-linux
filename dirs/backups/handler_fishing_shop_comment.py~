#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2014-12-05 15:45:20
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$

from __future__ import division
from access_track import access_log
import tornado.web
from tornado.web import asynchronous
from tornado.options import options

from mongokit import *
from mongokit.helpers import totimestamp, fromtimestamp
from mongo_field_encoder import MongoFieldEncoder
from handler_base import BaseHandler
from services.service_post_list import *
from auth import requires_auth
import traceback
import json
from bson import ObjectId
import datetime
import random
from log import get_logger
from model.posts import Post
from model.user_post_activiy import User_post_activiy
from model.user_collect_post import User_collect_post
from model.user_collect_tool import User_collect_tool
from utils.redis_client import RedisClient
from services.service_activity import *
from tornado import gen
from tornado.escape import url_escape
from services.service_article import *
from services.service_shop import *
from utils.mongo_client import MongoClient
from services.service_fishing_shop import *


log = get_logger()


class FishingShopComment(BaseHandler):

    def __init__(self, application, request, **kwargs):
        super(FishingShopComment, self).__init__(application, request, **kwargs)
    """
        渔具店 评论
    """
    @gen.coroutine
    @asynchronous
    @access_log
    # @requires_auth
    def get(self):
        self.set_header("Access-Control-Allow-Origin", "*")
        log.info('FishingShopComment.get is called'+str(self.request.arguments))
        # 渔具店id
        shop_id = self.get_argument("id")
        request_cursor = self.get_argument("cursor", "")
        where = {
            "shop_id": shop_id,
            "status": 1,
        }
        if request_cursor:
            where["created"] = {"$lt": int(request_cursor)}

        response = []
        try:
            comments_list, cursor = getShopCommentList(where)
            for comment in comments_list:
                user = MongoClient.find_one({"username": comment["username"]}, 'users')
                userinfo = {
                    "username": user["username"],
                    "nickname": user["nick"],
                    "avatar": user["avatar_url"],
                }
                dic = {"userinfo": userinfo, 'comment_content': comment['content'],
                       'pages': comment.get("pages", ""),
                       'stars': comment.get("stars", ""),
                       "created": comment["created"]}

                response.append(dic)

            self.write(json.dumps({"entities": response, "cursor": cursor},
                                   indent=2, ensure_ascii=False, cls=MongoFieldEncoder))
            self.finish()
        except Exception as e:
            log.info('FishingShopComment.get Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return

    @requires_auth
    @asynchronous
    @gen.coroutine
    def post(self):
        log.info("FishingShopComment.post:"+str(self.request.body))
        try:
            body = json.loads(self.request.body, encoding="utf-8")
            fish_shop_id = body.get("id", "")
            # 默认为5个小星星
            stars = body.get("stars", "5")
            comment = body.get("comment", '')
            pages = body.get("pages", [])
            if len(pages) > 9:
                self.fire_response_bad_content("common_error", "keyword", "图片上传不能大于9张")
                return

            if not comment or not fish_shop_id:
                self.fire_response_bad_content("common_error", "keyword", "关键字不能为空")
                return

            if not MongoClient.find_one({"_id": ObjectId(fish_shop_id)}, "fishing_shop"):
                self.fire_response_bad_content("common_error", "keyword", "渔具店不存在")
                return

            created = datetime.datetime.utcnow()
            update_val = {
                "fishing_id": fish_shop_id,
                "username": self.username,
                "created": created,
                "pages": pages,
                "stars": stars,
                "content": comment,
                # 0,待审核 1,审核通过 2,下架
                "status": 0,
            }
            MongoClient.insert(update_val, "fishing_shop_comment")

            self.fire_response_sys_info("评论成功,管理员会尽快处理")
        except Exception as e:
            log.info('FishingShopComment.get Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return
