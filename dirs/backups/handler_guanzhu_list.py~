#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2014-12-05 15:45:20
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$

from __future__ import division
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import copy
from mongokit import *
from mongokit.helpers import totimestamp, fromtimestamp
import pymongo
from mongo_field_encoder import MongoFieldEncoder
from handler_base import BaseHandler
from access_track import access_log
from services.service_waterfall_list import *
from services.service_user_waterfall_flow import *
from services.service_waterfall_flow_json import *
from utils.banner import *
from services.service_post_list_place_property import *
import traceback
import json
import bson
import datetime
import time
import random
from log import get_logger
from utils.redis_client import RedisClient
from utils.mongo_client import MongoClient
from utils.gps_info import *
log = get_logger()
from distutils.version import LooseVersion


class GuanZhuListHandler(BaseHandler):
    """
    关注列表
    """
    def __init__(self, application, request, **kwargs):
        super(GuanZhuListHandler, self).__init__(application, request, **kwargs)

    @asynchronous
    @access_log
    def get(self):
        log.info("GuanZhuListHandler begin:" + str(self.request.query_arguments))

        request_cursor=self.get_argument('cursor','')
        request_cursor_array = request_cursor.split(",")
        act = self.get_argument('act', '')

        now = datetime.datetime.utcnow()
        lastest_up_time = self.get_argument('lastest_up_time', '')

        if lastest_up_time=='':
            new_lastest_up_time = str(totimestamp(now))
        else:
            if act == "up":
                new_lastest_up_time = str(totimestamp(now))
            else:
                new_lastest_up_time = lastest_up_time

        action=self.getActionByRequest()
        response = {
            "entities": [],
            "lastest_up_time": new_lastest_up_time
        }
        following_username_array=[]
        limit=10
        if self.username is None:
            response["show_type"] = 3
            response_str = json.dumps(response,
                                  indent=2,
                                  ensure_ascii=False,
                                  cls=MongoFieldEncoder)

            self.write(response_str)
            self.finish()
            return
        else:

            time_boundary=now
            if lastest_up_time!='':
                time_boundary = fromtimestamp(int(lastest_up_time))

            if action=='up':
                time_range = {
                    "$gt":time_boundary
                }

            else:
                time_range = {
                    "$lt": time_boundary
                }


            following_username_array=getFollowingUsernameList(self.username,time_range)


            ####仅限于第一次加载并且关注数为0的时候，才显示当前用户最近30天的渔获
            if lastest_up_time=='' and len(following_username_array)==0:
                ###未关注过任何人：先显示自己最近30天之内的所有内容
                if request_cursor_array:
                    where={
                        "deleted": {"$ne": True},
                        "sold_out": {"$ne": "1"},
                        "yuhuo_type": 0,
                        "actor.username": self.username,
                        "created":{"$gt":datetime.datetime.utcnow()-datetime.timedelta(days=30)},
                    }
                    if request_cursor_array[0]=="1":
                        created_cursor=request_cursor_array[1]
                        cursor_datetime = fromtimestamp(int(created_cursor))
                        where["created"]["$lt"]=cursor_datetime


                order_by = [('created', pymongo.DESCENDING)]

                post_array, cursor_return, post_id_array=getPostSearchList(where,limit,order_by,self.username)
                if cursor_return!="-1":
                    response["cursor"]="1,"+cursor_return
                else:
                    ###当用户渔获翻到最后一页时，返回no_follow标识
                    response["no_follow"] = 1

                where = {
                    "deleted": {"$ne": True},
                    "sold_out": {"$ne": "1"},
                    "yuhuo_type": 0,
                    # "page": {"$exists": True},
                    "created": {'$gt': fromtimestamp(int(new_lastest_up_time)-1000)},
                    "actor.username": self.username
                }
                order_by = [('created', pymongo.DESCENDING)]
                new_post_array, post_id_array = getPostSearchListNoCursor(where, order_by)
                if new_post_array:
                    post_array.insert(0, new_post_array[0])

                response["entities"] =getPostListJson(post_array)
                response["show_type"] = 3
                response_str = json.dumps(response,
                                      indent=2,
                                      ensure_ascii=False,
                                      cls=MongoFieldEncoder)

                self.write(response_str)
                self.finish()
                return


        try:
            where = {
                "deleted": {"$ne": True},
                "sold_out": {"$ne": "1"},
                "yuhuo_type": 0,
                "created": {"$gt": datetime.datetime.utcnow() - datetime.timedelta(days=30)},
                "actor.username": {
                    "$in": following_username_array
                }
            }

            if action == "down" and request_cursor_array[0] == "2":
                created_cursor = request_cursor_array[1]
                cursor_datetime = fromtimestamp(int(created_cursor))
                where["created"]["$lt"] = cursor_datetime

            order_by = [('created', pymongo.DESCENDING)]
            post_array, cursor_return, post_id_array = getPostSearchList(where, limit, order_by, self.username)

            where = {
                "deleted": {"$ne": True},
                "sold_out": {"$ne": "1"},
                "yuhuo_type": 0,
                # "page": {"$exists": True},
                "created": {'$gt': fromtimestamp(int(new_lastest_up_time)-1000)},
                "actor.username": self.username
            }
            order_by = [('created', pymongo.DESCENDING)]
            new_post_array, post_id_array = getPostSearchListNoCursor(where, order_by)
            if new_post_array:
                post_array.insert(0, new_post_array[0])

            if action=='up':
                if request_cursor!='':
                    response["cursor"] = request_cursor
                else:
                    response["no_follow"] = 1
            else:
                if cursor_return != "-1":
                    response["cursor"] = "2," + cursor_return
                else:
                    response["no_follow"] = 1

            response["entities"] = getPostListJson(post_array)
            os, version = self.getClientVersion()
            if version >= "3.2.0":
                if len(response["entities"]) >= 6:
                    response["entities"][6] = {
                        "model": "adhub",
                        "data_type": "adhub",
                        "ios_ad_id": "5619",
                        "an_ad_id": "5619"
                    }

            response["show_type"] = 3
            response = json.dumps(response,
                                  indent=2,
                                  ensure_ascii=False,
                                  cls=MongoFieldEncoder)

            self.write(response)
            self.finish()
            return

        except Exception as e:
            log.info('PostsActADHandler.get Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return


    ###根据传入参数判断当前用户的行为：
    ############act == up and lastest_up_time!=''  动作：从上往下滑动屏幕，下拉
    ############act == ''          动作：从下往上滑动屏幕，刷新
    ##########注意：当第一次进入时失败，没有结果，此时前端下拉刷新时，当第一次进入处理
    ##########此时传入act == up lastest_up_time＝＝'',也可以看作从下往上滑动屏幕，刷新
    def getActionByRequest(self):
        act = self.get_argument('act', '')
        lastest_up_time = self.get_argument('lastest_up_time', '')
        if act == 'up' and  lastest_up_time!='':
            action="up"
        else:
            action="down"

        return action
