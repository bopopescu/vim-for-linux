#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
from auth import requires_auth
import pymongo
import time
from log import get_logger
from model.message_push_control import Message_Push_Control
from model.permissions_ht import Permissions_ht
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from utils.mongo_front import MongoFront
from bson.objectid import ObjectId


try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()

class OrderBalanceFlagHandler(BaseHtHandler):

    def __init__(self, application, request, **kwargs):
        super(OrderBalanceFlagHandler, self).__init__(application, request, **kwargs)

    @requires_auth
    @asynchronous
    def post(self):
        log.info("OrderBalanceFlagHandler.post is called:+"+self.request.body)
        try:
            body_dic = json.loads(self.request.body,encoding="utf-8")
            order_id = body_dic.get("order_id", None)
            if order_id is None:
                self.fire_response_bad_request(self, order_id)
                return

            # 查询条件
            balance_where = {
                "_id": ObjectId(order_id),
                "balance_status": {"$ne":1},
                "payment": {"$in": ["1", "3"]},
                "pay_status": 10,
                "status": 4,
            }
            ziya_order_cursor = MongoFront.find_one(balance_where, "ziya_order")
            if ziya_order_cursor is None:
                self.fire_response_sys_error()

            #  修改order表中的balance_status字段
            od_where = {
                "_id": ObjectId(order_id)
            }
            up_val = {
                "$set": {
                    "balance_status": 1
                }
            }
            MongoFront.update(od_where, up_val, "ziya_order")
            response = {"result": "1"}
            self.write(json.dumps(response,
                                  indent=2,
                                  ensure_ascii=False))
            self.finish()
        except Exception as e:
            log.error('OrderBalanceFlagHandler.post Exception:%s' % e.message)
            log.error(traceback.format_exc())
            self.fire_response_bad_request(key_required=e.message)
            return
