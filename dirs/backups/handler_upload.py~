#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2016-01-23 15:45:20
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$

from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
import pymongo
import time
from log import get_logger
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from auth import requires_auth
from tornado import gen
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
from log import get_logger
log = get_logger()

class UploadHandler(BaseHtHandler):
    """
    帖子处理类
    """
    def __init__(self, application, request, **kwargs):
        super(UploadHandler, self).__init__(application, request, **kwargs)

    @tornado.gen.engine
    @asynchronous
    def get(self):
        # log.info("UploadHandler.get:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")

        server_url = options.upload_url+"/jsp/controller.jsp"+"?s=s&"
        params = self.request.arguments
        for key in params:
             param = params[key][0]
             server_url=server_url+"&"+key+"="+param

        headers = {}
        headers = self.request.headers
        log.info("server_url:"+server_url)

        request = HTTPRequest(url=server_url,\
                              method="GET", \
                              headers=headers,\
                              follow_redirects=False,\
                              request_timeout=10000)

        response=yield gen.Task(AsyncHTTPClient().fetch,request)

        if response.body:
            log.info(" code:"+str(response.code))

        self.set_status(response.code)
        self.write(response.body)
        self.finish()





    @tornado.gen.coroutine
    @requires_auth
    def post(self):
        """
        发布文章
        """
        # log.info('UploadHandler.post is called:'+self.request.body)
       
        try:
            data = {}
            try:
                data = json.loads(self.request.body, encoding='utf-8')
            except Exception as e:
                pass


            server_url = options.upload_url+"/jsp/controller.jsp?s=s"
            params = self.request.arguments
            for key in params:
                param = params[key][0]
                if key!="lastModifiedDate":
                    server_url=server_url+"&"+key+"="+param.replace(" ","")

       
            headers = self.request.headers
        
            log.info("server_url:"+server_url)
        
            request = HTTPRequest(url=server_url,\
                              method="POST", \
                              headers=headers,\
                              body=self.request.body, \
                              follow_redirects=False)

            response=yield gen.Task(AsyncHTTPClient().fetch,request)
            if response.code!=200:
                log.info("upload error:"+str(response.error))

            if response.body:
                log.info("  code:"+str(response.code))
                resp_body = eval(response.body)
                resp_url = resp_body.get("url")
                resp_url = str(resp_url).replace("30!","80!")
                resp_url = resp_url+"/thumbnail/640x"
                log.info("resp_url"+resp_url)
                resp_body["url"] = resp_url
                self.write(json.dumps(resp_body,
                                  indent=2,
                                  ensure_ascii=False))


                self.finish()
            else:
                error = "upload fail"
                des = "upload fail"
                self.fire_response_error_info(error,des)
        except Exception as e:
            log.error("ArticlesHandler exception:"+e.message)
            log.error(traceback.format_exc())
            self.fire_response_sys_error()
            return

        




