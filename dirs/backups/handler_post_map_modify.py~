#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
from tornado import gen
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
from services.service_post import *
import re
import hashlib
from bson import ObjectId
import random
import time
from log import get_logger
from model.biz_user import Biz_User
from model.permissions_ht import Permissions_ht
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from utils.mongo_front import MongoFront
from mongo_field_encoder import MongoFieldEncoder
from services.service_activity import *
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from services.service_image_cloud import *
import pymongo
from auth import requires_auth
from services.service_admin_log import save_log
from services.service_fishing_place import get_gps_info
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()


class PostMapModify(BaseHtHandler):
    @asynchronous
    @requires_auth
    def get(self, post_id):
        log.info("PostMapModify.get is called:")
        post_id = post_id[1:]
        # post_id = self.get_argument('post_id', '')
        if post_id:
            filter = {
                "_id": 0,
                "gps_info": 1,
            }
            where = {
                "_id": ObjectId(post_id)
            }
            post_gps_info = MongoFront.find_one(where, "posts", filter)
            response = {}
            response["entities"] = [post_gps_info]
            self.write(json.dumps(response,indent=2, ensure_ascii=False, cls=MongoFieldEncoder))
            self.finish()

    @asynchronous
    @requires_auth
    def put(self, post_id):
        log.info("PostMapModify.get is called:")
        post_id = post_id[1:]
        # post_id = self.get_argument('post_id', '')
        body_dic = json.loads(self.request.body, encoding="utf-8")
        Lng_Lat = body_dic.get("Lng_Lat", "")
        address = body_dic.get("address", "")


        if post_id and Lng_Lat and address :
            gps_info = get_gps_info(Lng_Lat.split(",")[0], Lng_Lat.split(",")[1])
            gps_info["address"] = address
            update = {
                "$set": {
                    "gps_info": gps_info
                }
            }
            where = {
                "_id": ObjectId(post_id)
            }
            MongoFront.update(where, update, "posts")
            response = {}
            response["entities"] = "ok"
            self.write(json.dumps(response,indent=2, ensure_ascii=False, cls=MongoFieldEncoder))
            self.finish()
