#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
import pymongo
import time
from log import get_logger
from model.accounts_ht import Account_ht
from model.users import Users
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from utils.mongo_front import MongoFront

from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_client import MongoClient
from tornado import gen
from auth import requires_auth
try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class BatchFollowingHandler(BaseHtHandler):
    @asynchronous
    @tornado.gen.engine
    @requires_auth
    def post(self):
        log.info("BatchFollowingHandler.post:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")
        
        
        body_dic = json.loads(self.request.body,encoding="utf-8")
        following=body_dic["following"]

        followed_users=body_dic["followed_users"]
        followed_user_array=followed_users.split(",")
        where={
            "mobile":following
        }
        account=MongoFront.find_one(where,"accounts")

        where = {
            "mobile": following
        }
        user = MongoFront.find_one(where, "users")
        if account and user:
            password=account.get("password","")
            mobile=account.get("mobile","")
            if password and mobile:
                user_info={
                    "grant_type":"password",
                    "username":mobile,
                    "password":password
                }

                ####获取关注人token
                server_url=options.fish_front_end_server+"/login"
                request = HTTPRequest(url=server_url,\
                                      method="POST", \
                                      body=json.dumps(user_info,indent=2, ensure_ascii=False,cls=MongoFieldEncoder),\
                                      follow_redirects=False,\
                                      request_timeout=3000)

                response=yield gen.Task(AsyncHTTPClient().fetch,request)

                if response.code!=200:
                    self.set_status(response.code)
                    self.write(json.dumps(response.body,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
                    self.finish()
                    return

                if response.body:
                    log.info("response.body:"+response.body+"  code:"+str(response.code))

                response_body_dic = json.loads(response.body,encoding="utf-8")
                token=response_body_dic["access_token"]


                headers = {}
                headers["Host"] = options.api_host
                headers["Authorization"]=" Bearer %s"%(token)
                for followed_user in followed_user_array:
                    # log.info("followed_user:"+followed_user)
                    request={
                        "following":followed_user
                    }
                    log.info("request:"+str(request))
                    server_url=options.fish_front_end_server+"/following"
                    log.info("server_url:"+str(server_url))
                    request = HTTPRequest(url=server_url,\
                                      method="POST", \
                                      headers=headers, \
                                      body=json.dumps(request,indent=2, ensure_ascii=False,cls=MongoFieldEncoder),\
                                      follow_redirects=False,\
                                      request_timeout=3000)

                    response=yield gen.Task(AsyncHTTPClient().fetch,request)

                    if response.code!=200:
                        log.info("response.body:"+response.body+"  code:"+str(response.code)+" error:"+str(response.error))
                        # self.set_status(response.code)
                        # self.write(json.dumps(response.body,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
                        # self.finish()
                        # return

                    if response.body:
                        log.info("response.body:"+response.body+"  code:"+str(response.code))

        self.write(json.dumps({},indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()

    @asynchronous
    @tornado.gen.engine
    @requires_auth
    def delete(self):
        log.info("BatchFollowingHandler.delete:"+self.request.body)
        self.set_header("Access-Control-Allow-Origin", "*")
        
        following=self.get_argument('following',"")
        log.info("following:"+following)

        followed_users=self.get_argument('followed_users',"")
        log.info("followed_users:"+followed_users)
        followed_user_array=followed_users.split(",")

        user_info={
            "grant_type":"password",
            "username":following,
            "password":options.vest_user_password
        }

        ####获取关注人token
        server_url=options.fish_front_end_server+"/login"
        request = HTTPRequest(url=server_url,\
                              method="POST", \
                              body=json.dumps(user_info,indent=2, ensure_ascii=False,cls=MongoFieldEncoder),\
                              follow_redirects=False,\
                              request_timeout=3000)
        
        response=yield gen.Task(AsyncHTTPClient().fetch,request)


        if response.code!=200:
            self.set_status(response.code)
            self.write(json.dumps(response.body,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
            self.finish()
            return

        if response.body:
            log.info("response.body:"+response.body+"  code:"+str(response.code))


        response_body_dic = json.loads(response.body,encoding="utf-8")
        token=response_body_dic["access_token"]


        headers = {}
        headers["Host"] = options.api_host
        headers["Authorization"]=" Bearer %s"%(token)
        for followed_user in followed_user_array:
            # log.info("followed_user:"+followed_user)
            
            server_url=options.fish_front_end_server+"/following?following="+followed_user
            request = HTTPRequest(url=server_url,\
                              method="DELETE", \
                              headers=headers, \
                              follow_redirects=False,\
                              request_timeout=3000)
        
            response=yield gen.Task(AsyncHTTPClient().fetch,request)

        if response.code!=200:
            self.set_status(response.code)
            self.write(json.dumps(response.body,indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
            self.finish()
            return

        if response.body:
            log.info("response.body:"+response.body+"  code:"+str(response.code))

        self.write(json.dumps({},indent=2, ensure_ascii=False,cls=MongoFieldEncoder))
        self.finish()
