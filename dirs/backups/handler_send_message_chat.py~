#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2015-05-18 17:41:52
# @Author  : Your Name (you@example.org)
# @Link    : http://example.org
# @Version : $Id$
from handler_baseHt import BaseHtHandler
from log import get_logger
import tornado.web
from tornado.web import asynchronous
from tornado import gen
from tornado.options import options
import json
import hashlib
import datetime
import hashlib
import random
import pymongo
import time
from log import get_logger
from model.accounts_ht import Account_ht
from model.posts import Post
import optionsSetting
from utils.secret import *
import traceback
from utils.redis_client import RedisClient
from mongo_field_encoder import MongoFieldEncoder
from mongolog import MongoHandler
from mongokit.helpers import totimestamp, fromtimestamp
from utils.token_im import TokenService
from tornado.httpclient import HTTPRequest
from utils.mongo_front import MongoFront
from utils.mongo_im import MongoIm
from utils.mongo_client import MongoClient
from services.service_post import getPostList
from services.service_activity import *
from bson import ObjectId
from auth import requires_auth

try:
    from tornado.curl_httpclient import CurlAsyncHTTPClient as AsyncHTTPClient
except ImportError:
    from tornado.simple_httpclient import SimpleAsyncHTTPClient as AsyncHTTPClient
log = get_logger()
class SendMessageChatHandler(BaseHtHandler):
    ###发送聊天消息
    @asynchronous
    @gen.coroutine
    @requires_auth
    def post(self):
        log.info("SendMessageChatHandler.post is called:"+self.request.body)
        body_dic = json.loads(self.request.body,encoding="utf-8")
        from_user = body_dic.get('from',"")
        to_user = body_dic.get('to',"")
        content=body_dic.get('content',"")
        target_type=body_dic.get('target_type',"")

        if from_user =="" or to_user=="" or content=="":
            self.fire_response_bad_request("from or to or content")
            return

        result=""
        code=200
        try:
            where={
                "username":from_user
            }
            user=MongoFront.find_one(where,"users")

            if user:
                message = {
                    "target_type": "users",
                    "target": [to_user],
                    "msg": {
                        "type": "txt",
                        "msg": content
                    },
                    "from": from_user,
                    "ext": {
                        "attr1": "v1",
                        "attr2": "v2",
                        "avatar": user.get("avatar_url",""),
                        "nickname": user.get("nick","")
                    }
                }
                if target_type:
                    message["target_type"]=target_type


                # url="http://api.ziyadiaoyu.com:8089/message"

                url="https://a1.easemob.com/nbchat/ziyadiaoyu/messages"
                headers = {}
                headers["Authorization"]="Bearer %s"%(TokenService.getIMToken())
                request = HTTPRequest(url=url,\
                                      method="POST", \
                                      body=json.dumps(message), \
                                      follow_redirects=False,\
                                      request_timeout=3000,
                                      headers=headers,
                                      )

                response=yield gen.Task(AsyncHTTPClient().fetch,request)

                code=response.code
                result=response.body

                log.info("code:"+str(code))
                log.info("result:"+str(result))

            else:
                code=400
                result="invalid user"


        except Exception as e:
            log.info('send Message Exception():%s' % e.message)
            log.error(traceback.format_exc())
            code=400
            result=e.message


        self.set_status(code)
        self.write(result)

        self.finish()

